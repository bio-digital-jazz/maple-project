library(shiny)
library(plotly)
ui <- fluidPage(
# App title ----
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot"),
p("hello tehere")
)
)
)
server <- function(input, output) {
output$distPlot <- renderPlot({
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
})
}
shinyApp(ui = ui, server = server)
runApp("HelloApp")
runApp("HelloApp")
runApp("../HelloApp")
runApp("../HelloApp")
runApp('HelloApp')
runApp('./HelloApp')
runApp()
runApp()
runApp('HelloApp')
runApp('./HelloApp')
runApp('../HelloApp')
runApp('../HelloApp')
shinyApp(ui = ui, server = server)
runApp()
runApp(display.mode = "showcase")
runApp()
runExample("05_sliders")
runExample("01_hello")
runApp()
runApp('./HelloApp')
runApp('../HelloApp')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
windows()
ggplot() +
geom_bar(x=1:2, y=c(1, 2))
windows()
ggplot() +
geom_col(x=1:2, y=c(1, 2))
windows()
ggplot() +
geom_col(aes(x=1:2, y=c(1, 2)))
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
BeforeScore = round(rnorm(100, 3, 1))
windows(5,5)
hist(BeforeScore)
hist(BeforeScore, breaks=-1:6+0.5)
hist(BeforeScore, breaks=-1:5+0.5)
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(1,5))
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(0.5,5.5))
BeforeScore = round(rnorm(100, 3, 1))
windows(5,5)
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(0.5,5.5))
AfterScore = round(rnorm(100, 4, 1))
windows(5,5)
hist(AfterScore, breaks=-1:5+0.5, xlim=c(0.5,5.5))
BeforeScore = round(rnorm(100, 3, 1))
windows(5,5)
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(0.5,5.5))
AfterScore = round(rnorm(100, 4, 1))
windows(5,5)
hist(AfterScore, breaks=-1:10+0.5, xlim=c(0.5,5.5))
BeforeScore = round(rnorm(100, 3, 1))
windows(5,5)
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(0.5,5.5), main = "Before score", xlab="Self reported scale of awesomness")
AfterScore = round(rnorm(100, 4, 1))
windows(5,5)
hist(AfterScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "After score", xlab="Self reported scale of awesomness")
BeforeScore = round(rnorm(100, 3, 1))
windows(5,5)
hist(BeforeScore, breaks=-1:5+0.5, xlim=c(0.5,5.5), main = "Before score", xlab="Self reported scale of awesomness", las=1)
AfterScore = round(rnorm(100, 4, 1))
windows(5,5)
hist(AfterScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "After score", xlab="Self reported scale of awesomness", las=1)
hist(BeforeScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "Before score", xlab="Self reported scale of awesomness", las=1)
windows(5,5)
hist(BeforeScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "Before score", xlab="Self reported scale of awesomness", las=1)
windows(5,5)
hist(AfterScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "After score", xlab="Self reported scale of awesomness", las=1)
AfterScore = round(rnorm(100, 4, 1))
windows(5,5)
hist(AfterScore, breaks=-1:10+0.5, xlim=c(0.5,5.5), main = "After score", xlab="Self reported scale of awesomness", las=1)
ChangeScore = round(rnorm(100, 0, 1))
windows(5,5)
hist(AfterScore, breaks=-10:10+0.5, xlim=c(-2.5,2.5), main = "Change in your knowledge", xlab="Self reported change in knowledge", las=1)
ChangeScore = round(rnorm(100, 0, 1))
windows(5,5)
hist(ChangeScore, breaks=-10:10+0.5, xlim=c(-2.5,2.5), main = "Change in your knowledge", xlab="Self reported change in knowledge", las=1)
ChangeScore = round(rnorm(100, 0.5, 1))
windows(5,5)
hist(ChangeScore, breaks=-10:10+0.5, xlim=c(-2.5,2.5), main = "Change in your knowledge", xlab="Self reported change in knowledge", las=1)
runApp()
################################ UI ########################################
library(shiny)
library(plotly)
# Define UI for app that draws a histogram ----
ui = fluidPage(
# App title ----
titlePanel("The odds ratio viz-ualiser!"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Slider for the number of bins ----
sliderInput("Prob1",
"Baseline probability:",
min = 0,
max = 1,
value = 0.5),
#
sliderInput("OddsRatio",
"Odds ratio:",
min = 1,
max = 5,
value = 1,
step = 0.1)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
)
)
server = function(input, output) {
output$distPlot = renderPlot({
# Prep data
Prob2 = (input$Prob1 * input$OddsRatio) / (1 - input$Prob1 + input$Prob1 * input$OddsRatio)
Prob2 = round(Prob2, 2)
RiskRatio = Prob2 / input$Prob1
RiskRatio = round(RiskRatio, 1)
## render data as plot
ggplot() +
geom_col(aes(x=1:2, y=c(input$Prob1, Prob2))) +
geom_text(aes(x=1:2, y=c(input$Prob1, Prob2), label=c(input$Prob1, Prob2)), position=position_dodge(width=0.9), vjust=-0.25) +
geom_text(aes(x=1.3, y=-0.1, label=paste0("RR = ", RiskRatio))) +
geom_text(aes(x=1.7, y=-0.1, label=paste0("OR = ", input$OddsRatio))) +
coord_cartesian(xlim=c(0,3), ylim=c(-0.2,1.2)) +
labs(title = "Check your odds ratio here!",
x="", y="Probability")
##plot(1:2, c(input$Prob1, Prob2), ylim=c(0,1))
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
ls()
rm(list=ls())
shiny::runApp()
runApp()
rm(list=ls())
shiny::runApp()
