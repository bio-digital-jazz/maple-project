selectInput(input = "Facility",
label = "Facility:",
choices = sort(unique(data$FacilityName))
),
#Select input field for Cancer
selectInput(input = "Cancer",
label = "Cancer:",
choices = sort(unique(data$Cancer))
),
#Select input slider for year
sliderInput(input = "YearSlider",
label = "Year:",
min = min(data$ProcedureYear),
max = max(data$ProcedureYear),
value = c(min(data$ProcedureYear), max(data$ProcedureYear)),
step = 1,
sep = ""
)
),
#Main panel
mainPanel(
#Creating tabs for main panel
tabsetPanel(type = "tabs",
#Tab 1: Activity
tabPanel("Activity",
#Rendering ActivityPlot
plotOutput("ActivityPlot"),
#Setting up padding for text to make it flush with graph
div(style = "padding-left: 0px;",
#Rendering Text 1
textOutput("ActivityPlotText1"),
#Rendering Text 2
textOutput("ActivityPlotText2"),
#Rendering Text 3
textOutput("ActivityPlotText3"),
#Rendering Text 4
textOutput("ActivityPlotText4"),
div(style = "max-width: 500px;" ,
dataTableOutput("Table")))
),
# #Tab 2: Volume
# tabPanel("Volume",
#          #Rendering CumulativePlot
#          plotOutput("CumulativePlot")),
#Tab 3: Flow
tabPanel("Flow",
#Rendering SankeyPlot
sankeyNetworkOutput("SankeyPlot"),
dataTableOutput("Table2"))
# tabPanel("Data"),
# tabPanel("Tab")
)
)
)
)
##2. Shiny server
#Setting up Shiny server
server <- function(input, output, session) {
#Setting observeEvent to update Facility select input as user selects LHD
observeEvent(input$LHD, {
#Updatin
updateSelectInput(session, "Facility",
choices = sort(unique(data$FacilityName[data$FacilityLHDName == input$LHD])))
})
#Setting observeEvent to update Cancer select input as user selects LHD and Facility
observeEvent(input$Facility, {
updateSelectInput(session, "Cancer",
choices = sort(unique(data$Cancer[data$FacilityName == input$Facility])))
})
#Generating react dataframe for DFTitanic
rdfTab1Data <- reactive({
subset(data, FacilityLHDName == input$LHD & FacilityName == input$Facility & Cancer == input$Cancer & ProcedureYear >= input$YearSlider[1] & ProcedureYear <= input$YearSlider[2])
})
#Generating plots
#TAB 1: Activity
output$ActivityPlot <- renderPlot({
ggplot(data=rdfTab1Data(), aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b\n%Y") +
ggtitle(paste0(input$Facility, ": ", input$Cancer),
subtitle = input$LHD) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold")) +
coord_flip()
})
#Text for Acitivty Plot
output$ActivityPlotText1 <-renderText({paste("Each dot represents the index surgical episode")})
output$ActivityPlotText2 <-renderText({paste("Time period = ", input$YearSlider[1], " to ", input$YearSlider[2])})
output$ActivityPlotText3 <-renderText({paste("Number of surgeries = ", nrow(rdfTab1Data()))})
output$ActivityPlotText4 <-renderText({paste("Number of procedure types = ", length(unique(rdfTab1Data()$ProcedureGroup2)))})
#Table outputremove_rownames %>% column_to_rownames(var="ProcedureYear")}
output$Table <- renderDataTable({rdfTab1Data() %>%
group_by(ProcedureYear)%>%
summarize(Count = n()) %>%
ungroup()}, options = list(searching = FALSE, lengthChange = FALSE, info = FALSE, paging = FALSE,
columnDefs = list(list(className = 'dt-center', targets = '_all')), processing=FALSE), rownames = FALSE)
#Tab 2: Cumulative Plot
output$CumulativePlot <- renderPlot({
ggplot(data=rdfTab1Data() %>%
mutate(ProcedureMonthDay = format(as.Date(ProcedureDate, "%m/%d/%y"), "%m/%d"),
CommonProcedureDate =  as.Date(parse_date_time(ProcedureMonthDay, c('md', 'dmy')))) %>%
group_by(CommonProcedureDate, ProcedureYear, ProcedureGroup2) %>%
summarize(Count = n()) %>%
ungroup() %>%
group_by(ProcedureYear, ProcedureGroup2) %>%
arrange(CommonProcedureDate) %>%
mutate(Cumulative = cumsum(Count)),
aes(x=as.Date(CommonProcedureDate, "%m/%d"), y=Cumulative)) + geom_step() + facet_grid(ProcedureYear~ProcedureGroup2) + scale_x_date(labels = function(x) format(x, "%d-%b"),
limits = as.Date(c('0000-01-01','0000-12-31'))) +
theme(panel.grid.minor = element_blank(),
plot.title = element_text(size = 18, face = "bold"),
plot.subtitle = element_text(size = 14, face = "bold")) +
ggtitle(paste0(input$Facility, ": ", input$Cancer),
subtitle = input$LHD) +
xlab("") + ylab("")
})
#Tab 3: Flow
#Setting up Sankey Nodes
nodes <- reactive({rdfTab1Data() %>%
select(FacilityName) %>%
distinct(FacilityName) %>%
rename("name" = "FacilityName") %>%
{. ->> dftarget} %>%
rbind(rdfTab1Data() %>%
select(ResidentLHDName) %>%
distinct(ResidentLHDName) %>%
rename("name" = "ResidentLHDName")) %>%
mutate(id=seq(n())-1)})
#Setting up Sankey Links
links <- reactive({rdfTab1Data() %>%
group_by(FacilityName, ResidentLHDName) %>%
summarize(Count = n()) %>%
ungroup() %>%
left_join(nodes(), by=c("FacilityName"="name"), all.x=TRUE) %>%
rename("id_target" = "id") %>%
left_join(nodes(), by=c("ResidentLHDName"="name"), all.x=TRUE) %>%
rename("id_source" = "id",
"source" = "ResidentLHDName",
"target" = "FacilityName",
"value" = "Count")})
my_color <- 'd3.scaleOrdinal() .domain(["Central Coast", "Hunter New England", "South Eastern Sydney", "Berkeley Vale Private Hospital"]) .range(["rgb(106,66,137)", "blue", "blue", "blue"])'
vector=as.vector(links()$target)
#Plotting Sankey Plot
output$SankeyPlot <- renderSankeyNetwork({
sankeyNetwork(Links = links(),
Nodes = nodes(),
Source = "id_source", Target = "id_target",
Value = "value", NodeID = "name",
fontSize= 12, nodeWidth = 30, colourScale=my_color)
})
output$Table2 <- renderDataTable({
links()})
}
View(ui)
runApp('SurgicalActivityApp.R')
library(shiny); runApp('SurgicalActivityApp.R')
library(shiny); runApp('SurgicalActivityApp.R')
runApp('SurgicalActivityApp.R')
library(shiny); runApp('SurgicalActivityApp.R')
library(shiny); runApp('SurgicalActivityApp.R')
runApp('SurgicalActivityApp.R')
shiny::runApp()
shiny::runApp()
data <- readRDS(file = "./data/SurgicalActivityAppDF.2.Rda")
View(data)
shiny::runApp()
SurgicalActivityAppDF <- readRDS(file = ".data/SurgicalActivityAppDF.Rda")
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-mortality/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b/n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-mortality/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b/n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b/n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
library(lubridate)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b/n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b/%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
library(lubridate)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
library(lubridate)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b %Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
library(lubridate)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b /n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "/n",
"Number of surgeries = ", ResectionCount, "/n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
## Tab 1 - Activity: this is a beeswarm plot
#
library(ggbeeswarm)
SurgicalActivityAppDF <- readRDS(file = "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-activity/data/SurgicalActivityAppDF.Rda")
# user choices from Shint sdrop downs and sliders etc
FacilityLHDNameUser = "South Eastern Sydney"
FacilityNameUser = "Prince of Wales Hospital"
CancerNameUser = "Breast"
YearStartUser = 2009
YearEndUser = 2017
# 1 build local dataframe
Tab1Data = SurgicalActivityAppDF %>%
filter(Cancer == CancerNameUser,
FacilityName == FacilityNameUser,
ProcedureYear >= YearStartUser,
ProcedureYear <= YearEndUser)
# compute some summary stats
ResectionCount = nrow(Tab1Data)
ProcedureCount = length(unique(Tab1Data$ProcedureGroup2))
ProcedureRank1 = NA
YearCount = YearEndUser - YearStartUser + 1
# 2 plot it
PlotHeight = 1.5 + ProcedureCount / 1.6
PlotWidth = 1 + 2 * YearCount
windows(PlotWidth, PlotHeight)
ggplot(data=Tab1Data, aes(x=ProcedureGroup2, y=ProcedureDate)) +
geom_beeswarm(priority='density',cex=1, colour="#0000004D") +
scale_y_date(date_breaks ='1 years', date_labels = "%b\n%Y") +
ggtitle(paste0(FacilityNameUser, ": ", CancerNameUser),
subtitle = FacilityLHDNameUser) +
xlab("") + ylab("") +
theme(panel.grid.minor = element_blank()) +
coord_flip()
# 3 Create text from the inference engine
ExplanationTxt = "Each dot represents the index surgical episode"
ObservationsTxt = paste0("Time period = ", YearStartUser, " to ", YearEndUser, "\n",
"Number of surgeries = ", ResectionCount, "\n",
"Number of procedure types = ", ProcedureCount)
InsightsTxt = " < insight engine under construction > "
## End
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
