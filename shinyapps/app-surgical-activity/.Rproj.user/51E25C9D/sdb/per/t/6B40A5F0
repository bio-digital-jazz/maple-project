{
    "collab_server" : "",
    "contents" : "#Removing all objects in memory\nrm(list=setdiff(ls(), \"x\"))\n\n#Loading packages\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(readr)\nlibrary(shinythemes)\nlibrary(scales)\nlibrary(ggbeeswarm)\nlibrary(networkD3)\nlibrary(lubridate)\nlibrary(DT)\nlibrary(Cairo)\noptions(shiny.usecairo=T)\n\n#Loading data\n# data <- read.csv('SurgicalActivity.csv')\ndata <- readRDS(file = \"./data/data.Rda\")\n\n\ndata$Count=1\ndata <- data %>% mutate(ResidentLHDName = case_when(is.na(ResidentLHDName) ~ \"Not In NSW\",\n                                               TRUE ~ ResidentLHDName))\n###Building Shiny App\n# .nav-tabs {border-bottom: 1px solid rgb(106,66,137);} table.dataTable {line-height:0.7}\n\n##1. Shiny UI ns\n#Setting ui as a fluidPage: FluidPage enables Shiny Apps to adjust to screens of varying resolution\nui <- fluidPage(title=\"Surgical Activity App\", \n#CSS styling\n  tags$style(HTML(\"\n.tabbable > .nav > li > a {background-color: rgb(255,255,255);  color:black}\n.nav-tabs>li>a {border: 0px}\n.nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white;}\n.nav-tabs>li.active>a:focus {background-color: rgb(106,66,137);  color:white}\n.nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white}\n.nav-tabs>li.active>a:hover {background-color: rgb(106,66,137);  color:white}\n.nav-tabs {border-bottom: 1px solid rgb(106,66,137);}\n.irs-bar {background: rgb(106,66,137); border-top: 1px solid rgb(106,66,137); border-bottom: 1px rgb(106,66,137);}\n.irs-bar-edge {background: rgb(106,66,137); border: 1px solid rgb(106,66,137); height: 25px; border-radius: 0px; width: 20px;}\n.irs-to {background: rgb(106,66,137);}\n.irs-from {background: rgb(106,66,137);}\ntable.dataTable > thead > tr {color: white; background-color:rgb(106,66,137); text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting'] {text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting_asc'] {text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting_desc'] {text-align: center;}\nTable {padding-top: 15px;}\"\n        )\n  ),\ntags$head(tags$style(HTML(\"#ActivityFootnote {font-size: 10px; margin-top: -10px;}\"))),\n#                           #ActivityPlotText1 {font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; \n#                           border: solid rgb(106,66,137) 2px;\n#                           padding-top: 10px;\n#                           padding-bottom: 10px;\n#                           padding-left: 10px;\n#                           padding-right: 10px;}\n#                           #ActivityFootnote {font-size: 10px; margin-top: -10px;}\"))),\n  #Adding in titlePanel\n  titlePanel(div(HTML(\"<strong><font style = 'color: rgb(106, 66, 137)'>Surgical Activity App</strong></font>\"),\n                 img(src=\"CILogo.jpg\", align =\"right\", height=55))),\n  #Setting overall layout to be sidebar layout\n  sidebarLayout(\n    #Inputs to visualisation\n    #Sidebar panel\n    sidebarPanel(\n      #Select input field for LHD\n      selectInput(input = \"LHD\",\n                  label = \"Local health district:\",\n                  choices = sort(unique(data$FacilityLHDName))\n      ),\n      #Select input field for Facility\n      selectInput(input = \"Facility\",\n                  label = \"Facility:\",\n                  choices = sort(unique(data$FacilityName))\n      ),\n      #Select input field for Cancer\n      selectInput(input = \"Cancer\",\n                  label = \"Cancer:\",\n                  choices = sort(unique(data$Cancer))\n      ),\n      #Select input slider for year\n      sliderInput(input = \"YearSlider\",\n                  label = \"Year:\",\n                  min = min(data$ProcedureYear),\n                  max = max(data$ProcedureYear),\n                  value = c(min(data$ProcedureYear), max(data$ProcedureYear)),\n                  step = 1,\n                  sep = \"\"\n    )\n    ),\n    #Main panel\n    mainPanel(\n      #Creating tabs for main panel\n      tabsetPanel(type = \"tabs\",\n                  #Tab 1: Activity\n                  tabPanel(\"Activity\", \n                           #Rendering ActivityPlot\n                           plotOutput(\"ActivityPlot\"),\n                           textOutput(\"ActivityFootnote\"),\n                           br(),\n                           # fluidRow(column(width = 6,\n                           #                 dataTableOutput(\"Table\")),                                 \n                           #          column(width = 6,\n                           #          div(\n                           #              #Rendering Text\n                           #              htmlOutput(\"ActivityPlotText1\"))))\n                           htmlOutput(\"ActivityPlotText1\")\n                               ),\n                  # #Tab 2: Volume\n                  # tabPanel(\"Volume\",\n                  #          #Rendering CumulativePlot\n                  #          plotOutput(\"CumulativePlot\")),\n                  #Tab 3: Flow\n                  tabPanel(\"Flow\",\n                           #Rendering SankeyPlot\n                           sankeyNetworkOutput(\"SankeyPlot\")),\n                  #Tab 4: Data\n                  tabPanel(\"Data\",\n                           dataTableOutput(\"Table\"),\n                           downloadButton('downloadData', 'Download table')),\n                  #Tab 5 Notes\n                  tabPanel(\"Notes\",\n                           htmlOutput(\"NotesText\"))\n    )\n  )\n)\n)\n\n##2. Shiny server\n#Setting up Shiny server\nserver <- function(input, output, session) {\n  \n  #Setting observeEvent to update Facility select input as user selects LHD\n  observeEvent(input$LHD, {\n    #Updatin\n    updateSelectInput(session, \"Facility\",\n                      choices = sort(unique(data$FacilityName[data$FacilityLHDName == input$LHD])))\n  })\n  #Setting observeEvent to update Cancer select input as user selects LHD and Facility\n  observeEvent(input$Facility, {\n    updateSelectInput(session, \"Cancer\",\n                      choices = sort(unique(data$Cancer[data$FacilityName == input$Facility])))\n  })  \n  #Generating react dataframe for DFTitanic\n  rdfTab1Data <- reactive({\n    subset(data, FacilityLHDName == input$LHD & FacilityName == input$Facility & Cancer == input$Cancer & ProcedureYear >= input$YearSlider[1] & ProcedureYear <= input$YearSlider[2])\n  })\n  \n  #Generating plots\n  #TAB 1: Activity\n  output$ActivityPlot <- renderPlot({\n  ggplot(data=rdfTab1Data(), aes(x=ProcedureGroup2, y=ProcedureDate)) +\n    geom_beeswarm(priority='density',cex=1, colour=\"#0000004D\") +\n    scale_y_date(date_breaks ='1 years', date_labels = \"%b\\n%Y\") +\n    ggtitle(paste0(input$Facility, \": \", input$Cancer), \n            subtitle = input$LHD) + \n    xlab(\"\") + ylab(\"\") +\n    theme(panel.grid.minor = element_blank(),\n          plot.title = element_text(size = 18, face = \"bold\"),\n          plot.subtitle = element_text(size = 14, face = \"bold\")) +\n    coord_flip()\n  })\n  #Text for Acitivty Plot\n  output$ActivityFootnote <- renderText({paste(\"Each dot represents the index surgical episode\")})\n  output$ActivityPlotText1 <-renderText({paste(\"<b>Observations</b> <br>\",\n                                               \"Time period = \", input$YearSlider[1], \" to \", input$YearSlider[2], sep =\"\",\"<br>\",\n                                               \"Number of surgeries = \", nrow(rdfTab1Data()),\"<br>\",\n                                               \"Number of procedure types = \", length(unique(rdfTab1Data()$ProcedureGroup2)),\"<br>\",\"<br>\",\n                                               \"<b>Insights</b> <br>\",\n                                               \"Any insights listed hereâ€¦\")})\n  #Tab 2: Cumulative Plot\n  output$CumulativePlot <- renderPlot({\n    ggplot(data=rdfTab1Data() %>% \n             mutate(ProcedureMonthDay = format(as.Date(ProcedureDate, \"%m/%d/%y\"), \"%m/%d\"),\n                    CommonProcedureDate =  as.Date(parse_date_time(ProcedureMonthDay, c('md', 'dmy')))) %>%\n             group_by(CommonProcedureDate, ProcedureYear, ProcedureGroup2) %>%\n             summarize(Count = n()) %>%\n             ungroup() %>%\n             group_by(ProcedureYear, ProcedureGroup2) %>%\n             arrange(CommonProcedureDate) %>% \n             mutate(Cumulative = cumsum(Count)),\n           aes(x=as.Date(CommonProcedureDate, \"%m/%d\"), y=Cumulative)) + geom_step() + facet_grid(ProcedureYear~ProcedureGroup2) + scale_x_date(labels = function(x) format(x, \"%d-%b\"),\n                                                                                                                                  limits = as.Date(c('0000-01-01','0000-12-31'))) +\n      theme(panel.grid.minor = element_blank(),\n            plot.title = element_text(size = 18, face = \"bold\"),\n            plot.subtitle = element_text(size = 14, face = \"bold\")) + \n      ggtitle(paste0(input$Facility, \": \", input$Cancer), \n              subtitle = input$LHD) + \n      xlab(\"\") + ylab(\"\")\n  })\n  \n  #Tab 3: Flow\n  #Setting up Sankey Nodes\n  nodes <- reactive({rdfTab1Data() %>%\n    select(FacilityName) %>%\n    distinct(FacilityName) %>%\n    rename(\"name\" = \"FacilityName\") %>%\n    {. ->> dftarget} %>%\n    rbind(rdfTab1Data() %>%\n            select(ResidentLHDName) %>%\n            distinct(ResidentLHDName) %>%\n            rename(\"name\" = \"ResidentLHDName\")) %>%\n    mutate(id=seq(n())-1)})\n  \n  #Setting up Sankey Links\n  links <- reactive({rdfTab1Data() %>%\n      group_by(FacilityName, ResidentLHDName) %>%\n      summarize(Count = n()) %>%\n      ungroup() %>%\n      left_join(nodes(), by=c(\"FacilityName\"=\"name\"), all.x=TRUE) %>%\n      rename(\"id_target\" = \"id\") %>%\n      left_join(nodes(), by=c(\"ResidentLHDName\"=\"name\"), all.x=TRUE) %>%\n      rename(\"id_source\" = \"id\",\n           \"source\" = \"ResidentLHDName\",\n           \"target\" = \"FacilityName\",\n           \"value\" = \"Count\")})\n  # vector=as.vector(links()$target)\n  # \n  # my_color <- 'd3.scaleOrdinal() .domain([\"Central Coast\", \"Hunter New England\", \"South Eastern Sydney\", \"Berkeley Vale Private Hospital\"]) .range([\"rgb(106,66,137)\", \"blue\", \"blue\", \"blue\"])'\n  # \n  # vector=as.vector(links()$target)\n  \n  #Plotting Sankey Plot\n  output$SankeyPlot <- renderSankeyNetwork({\n     sankeyNetwork(Links = links(),\n                   Nodes = nodes(),\n                   Source = \"id_source\", Target = \"id_target\",\n                   Value = \"value\", NodeID = \"name\",\n                   fontSize= 12, nodeWidth = 30)\n  })\n  \n  #Tab 4: Data\n  output$DataText <- renderText(paste(\"Data goes here â€“ if appropriate\"))\n  #Table outputremove_rownames %>% column_to_rownames(var=\"ProcedureYear\")}\n  output$Table <- renderDataTable({rdfTab1Data() %>%\n      group_by(ProcedureYear)%>%\n      summarize(Count = n()) %>%\n      ungroup() %>%\n      rename(\"Procedure Year\" = ProcedureYear)}, options = list(searching = FALSE, lengthChange = FALSE, info = FALSE, paging = FALSE, \n                                                                columnDefs = list(list(className = 'dt-center', targets = '_all')), processing=FALSE), rownames = FALSE)\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(rdfTab1Data()$FacilityName,rdfTab1Data()$Cancer,Sys.Date(),'.csv', sep='_')\n    },\n    content = function(con) {\n      write.csv({rdfTab1Data() %>%\n          group_by(ProcedureYear)%>%\n          summarize(Count = n()) %>%\n          ungroup() %>%\n          rename(\"Procedure Year\" = ProcedureYear)}, con)\n    }\n  )\n  \n  \n  # , colourScale=my_color\n  \n  #Tab 5: Notes\n  output$NotesText <- renderText(paste(\"Lorem ipsum dolor amet mlkshk ugh sartorial shabby chic schlitz XOXO portland fam ethical sriracha swag af. Plaid try-hard forage lomo sustainable. Fam fixie distillery succulents +1 crucifix tacos, keffiyeh aesthetic cardigan. Activated charcoal godard air plant, helvetica chambray bicycle rights YOLO pickled squid. Marfa affogato twee humblebrag.\"))\n}\n\n#Run App\nshinyApp(ui, server)\n\n\n\n",
    "created" : 1539052504062.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4241375549",
    "id" : "6B40A5F0",
    "lastKnownWriteTime" : 1539052511,
    "last_content_update" : 1539052511379,
    "path" : "C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/app-surgical-activity/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}