dataAssetRelatedResourcesDF0,
by = c("id" = "dataassetrelatedresource_id"))
assetsAndResourcesDF0 %>%
select(dataasset_id,
title,
description,
date_created,
next_review_date,
version,
hprm_reference) -> assetsAndResourcesDF1
colnames(assetsAndResourcesDF1) = c('dataAssetID',
'Title',
'Description',
'Date created',
'Next review date',
'Version',
'Reference')
readr::write_csv(assetsAndResourcesDF1, "./data/preparedData/assetsAndResources.csv")
library(shiny)
library(dplyr)
library(DT)
library(readr)
# get data
dataAssetsDF0<- read_csv("./data/preparedData/dataAssets.csv")
usersAndRolesDF0 <- read_csv("./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 <- read_csv("./data/preparedData/assetsAndResources.csv")
ui <- fluidPage(
fluidRow(
column(3,
""
),
column(9,
selectInput("assetChoice",
"",
width='700px',
choices = c("Choose a data asset", as.list(sort(dataAssetsDF0$Name))),
selected = NULL)
),
hr()
),
fluidRow(
column(2,
""),
column(8,
uiOutput("allAssets"))
)
)
server <- function(input, output) {
# TABS
output$allAssets = renderUI({
if (input$assetChoice != "Choose a data asset") {
div(
textOutput("assetDetailDescription"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Overview",
br(),
tableOutput("assetDetailOverview")),
tabPanel("Users and roles",
br(),
DTOutput("assetUsersAndRoles")),
tabPanel("Supporting documentation",
br(),
DTOutput("assetDetailDocumentation"))
)
)
} else {
includeHTML("./overPartial.html")
}
})
## ASSET DETAIL OVERVIEW
output$assetDetailOverview = renderTable({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice) %>%
select(-dataAssetID, -"Usage notes available", -Description)
df <- as.data.frame(t(assetDetails))
df$Description <- colnames(assetDetails)
colnames(df) = c("Data", "Description")
return(df[2:1])
return(t(assetDetails))
}
})
## USERS AND ROLES
output$assetUsersAndRoles= renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
usersAndRoles <- usersAndRolesDF0 %>%
filter(usersAndRolesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(usersAndRoles)
}
})
## ASSET DETAIL DESCRIPTION
output$assetDetailDescription = renderText({
if (input$assetChoice != "Choose a data asset") {
choice <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
return(paste0("", choice$Description))
}
})
## ASSET DETAIL DOCUMENTATION
output$assetDetailDocumentation = renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
assetsAndResources <- assetsAndResourcesDF0 %>%
filter(assetsAndResourcesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(assetsAndResources)
}
})
}
shinyApp(ui = ui, server = server)
# get data
dataAssetsDF0<- read_csv("./data/preparedData/dataAssets.csv")
usersAndRolesDF0 <- read_csv("./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 <- read_csv("./data/preparedData/assetsAndResources.csv")
runApp()
library(RSQLite)
library(dplyr)
library(readr)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataAssetsDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM data_assets_dataasset"))
usersDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM auth_user"))
dataAssetRolesDF0<- as_tibble(dbGetQuery(con, "SELECT * FROM data_assets_dataassetrole"))
relatedResourcesDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM related_resources_dataassetrelatedresource"))
dataAssetRelatedResourcesDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM related_resources_dataassetrelatedresource_data_asset"))
dataAssetsDF1 <- dataAssetsDF0 %>%
mutate(currently_active = case_when(
currently_active == 0 ~ "No",
currently_active == 1 ~ "Yes"
)) %>%
mutate(used_in_shared_dictionary = case_when(
used_in_shared_dictionary == 0 ~ "No",
used_in_shared_dictionary == 1 ~ "Yes"
)) %>%
mutate(governed_as_external_data = case_when(
governed_as_external_data == 0 ~ "No",
governed_as_external_data == 1 ~ "Yes"
)) %>%
mutate(available_for_analytics = case_when(
available_for_analytics == 0 ~ "No",
available_for_analytics == 1 ~ "Yes"
)) %>%
mutate(under_review = case_when (
under_review == 0 ~ "No",
under_review == 1 ~ "Yes"
)) %>%
mutate(utlizes_external_data = case_when(
utlizes_external_data == 0 ~"No",
utlizes_external_data == 1 ~ "Yes"
))
glimpse(dataAssetsDF1)
dataAssetsDF0$name
colnames(dataAssetsDF1) <- c('dataAssetID',
'Owning organisation',
'Owning business unit',
'Name',
'Asset ID',
'Version',
'Emergency shutdown contact',
'Emergency shutdown organisation',
'Coverage start date',
'Coverage end date',
'Data limiting marker',
'Update frequency',
'Currently active',
'Used in shared dictionary',
'Governed as external data',
'Available for analytics',
'Usage notes available',
'Data location',
'Description',
'Data location type',
'Under review',
'Utilizes external data',
'Type'
)
readr::write_csv(dataAssetsDF1, "./data/preparedData/dataAssets.csv")
# Create users and roles
usersAndRolesDF0 = usersDF0 %>%
left_join(dataAssetRolesDF0, by = c("id" = "user_id" )) %>%
select(type,
first_name,
last_name,
start_date,
end_date,
status,
data_asset_id)
colnames(usersAndRolesDF0) <- c("Type",
"First name",
"Last name",
"Start date",
"End date",
"Status",
"dataAssetID")
readr::write_csv(usersAndRolesDF0, "./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 =  inner_join(relatedResourcesDF0,
dataAssetRelatedResourcesDF0,
by = c("id" = "dataassetrelatedresource_id"))
assetsAndResourcesDF0 %>%
select(dataasset_id,
title,
description,
date_created,
next_review_date,
version,
hprm_reference) -> assetsAndResourcesDF1
colnames(assetsAndResourcesDF1) = c('dataAssetID',
'Title',
'Description',
'Date created',
'Next review date',
'Version',
'Reference')
readr::write_csv(assetsAndResourcesDF1, "./data/preparedData/assetsAndResources.csv")
library(shiny)
library(dplyr)
library(readr)
library(DT)
# get data
dataAssetsDF0<- read_csv("./data/preparedData/dataAssets.csv")
# get data
dataAssetsDF0<- read_csv("./data/preparedData/dataAssets.csv")
usersAndRolesDF0 <- read_csv("./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 <- read_csv("./data/preparedData/assetsAndResources.csv")
ui <- fluidPage(
fluidRow(
column(3,
""
),
column(9,
selectInput("assetChoice",
"",
width='700px',
choices = c("Choose a data asset", as.list(sort(dataAssetsDF0$Name))),
selected = NULL)
),
hr()
),
fluidRow(
column(2,
""),
column(8,
uiOutput("allAssets"))
)
)
server <- function(input, output) {
# TABS
output$allAssets = renderUI({
if (input$assetChoice != "Choose a data asset") {
div(
textOutput("assetDetailDescription"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Overview",
br(),
tableOutput("assetDetailOverview")),
tabPanel("Users and roles",
br(),
DTOutput("assetUsersAndRoles")),
tabPanel("Supporting documentation",
br(),
DTOutput("assetDetailDocumentation"))
)
)
} else {
includeHTML("./overPartial.html")
}
})
## ASSET DETAIL OVERVIEW
output$assetDetailOverview = renderTable({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice) %>%
select(-dataAssetID, -"Usage notes available", -Description)
df <- as.data.frame(t(assetDetails))
df$Description <- colnames(assetDetails)
colnames(df) = c("Data", "Description")
return(df[2:1])
return(t(assetDetails))
}
})
## USERS AND ROLES
output$assetUsersAndRoles= renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
usersAndRoles <- usersAndRolesDF0 %>%
filter(usersAndRolesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(usersAndRoles)
}
})
## ASSET DETAIL DESCRIPTION
output$assetDetailDescription = renderText({
if (input$assetChoice != "Choose a data asset") {
choice <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
return(paste0("", choice$Description))
}
})
## ASSET DETAIL DOCUMENTATION
output$assetDetailDocumentation = renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
assetsAndResources <- assetsAndResourcesDF0 %>%
filter(assetsAndResourcesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(assetsAndResources)
}
})
}
shinyApp(ui = ui, server = server)
library(RSQLite)
library(dplyr)
library(readr)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataAssetsDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM data_assets_dataasset"))
usersDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM auth_user"))
dataAssetRolesDF0<- as_tibble(dbGetQuery(con, "SELECT * FROM data_assets_dataassetrole"))
relatedResourcesDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM related_resources_dataassetrelatedresource"))
dataAssetRelatedResourcesDF0 <- as_tibble(dbGetQuery(con, "SELECT * FROM related_resources_dataassetrelatedresource_data_asset"))
dataAssetsDF1 <- dataAssetsDF0 %>%
mutate(currently_active = case_when(
currently_active == 0 ~ "No",
currently_active == 1 ~ "Yes"
)) %>%
mutate(used_in_shared_dictionary = case_when(
used_in_shared_dictionary == 0 ~ "No",
used_in_shared_dictionary == 1 ~ "Yes"
)) %>%
mutate(governed_as_external_data = case_when(
governed_as_external_data == 0 ~ "No",
governed_as_external_data == 1 ~ "Yes"
)) %>%
mutate(available_for_analytics = case_when(
available_for_analytics == 0 ~ "No",
available_for_analytics == 1 ~ "Yes"
)) %>%
mutate(under_review = case_when (
under_review == 0 ~ "No",
under_review == 1 ~ "Yes"
)) %>%
mutate(utlizes_external_data = case_when(
utlizes_external_data == 0 ~"No",
utlizes_external_data == 1 ~ "Yes"
))
glimpse(dataAssetsDF1)
dataAssetsDF0$name
colnames(dataAssetsDF1) <- c('dataAssetID',
'Owning organisation',
'Owning business unit',
'Name',
'Asset ID',
'Version',
'Emergency shutdown contact',
'Emergency shutdown organisation',
'Coverage start date',
'Coverage end date',
'Data limiting marker',
'Update frequency',
'Currently active',
'Used in shared dictionary',
'Governed as external data',
'Available for analytics',
'Usage notes available',
'Data location',
'Description',
'Data location type',
'Under review',
'Utilizes external data',
'Type'
)
readr::write_csv(dataAssetsDF1, "./data/preparedData/dataAssets.csv")
# Create users and roles
usersAndRolesDF0 = usersDF0 %>%
left_join(dataAssetRolesDF0, by = c("id" = "user_id" )) %>%
select(type,
first_name,
last_name,
start_date,
end_date,
status,
data_asset_id)
colnames(usersAndRolesDF0) <- c("Type",
"First name",
"Last name",
"Start date",
"End date",
"Status",
"dataAssetID")
readr::write_csv(usersAndRolesDF0, "./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 =  inner_join(relatedResourcesDF0,
dataAssetRelatedResourcesDF0,
by = c("id" = "dataassetrelatedresource_id"))
assetsAndResourcesDF0 %>%
select(dataasset_id,
title,
description,
date_created,
next_review_date,
version,
hprm_reference) -> assetsAndResourcesDF1
colnames(assetsAndResourcesDF1) = c('dataAssetID',
'Title',
'Description',
'Date created',
'Next review date',
'Version',
'Reference')
readr::write_csv(assetsAndResourcesDF1, "./data/preparedData/assetsAndResources.csv")
library(shiny)
library(dplyr)
library(DT)
library(readr)
# get data
dataAssetsDF0<- read_csv("./data/preparedData/dataAssets.csv")
usersAndRolesDF0 <- read_csv("./data/preparedData/usersAndRoles.csv")
assetsAndResourcesDF0 <- read_csv("./data/preparedData/assetsAndResources.csv")
ui <- fluidPage(
fluidRow(
column(3,
""
),
column(9,
selectInput("assetChoice",
"",
width='700px',
choices = c("Choose a data asset", as.list(sort(dataAssetsDF0$Name))),
selected = NULL)
),
hr()
),
fluidRow(
column(2,
""),
column(8,
uiOutput("allAssets"))
)
)
server <- function(input, output) {
# TABS
output$allAssets = renderUI({
if (input$assetChoice != "Choose a data asset") {
div(
textOutput("assetDetailDescription"),
br(),
tabsetPanel(type = "tabs",
tabPanel("Overview",
br(),
tableOutput("assetDetailOverview")),
tabPanel("Users and roles",
br(),
DTOutput("assetUsersAndRoles")),
tabPanel("Supporting documentation",
br(),
DTOutput("assetDetailDocumentation"))
)
)
} else {
includeHTML("./overPartial.html")
}
})
## ASSET DETAIL OVERVIEW
output$assetDetailOverview = renderTable({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice) %>%
select(-dataAssetID, -"Usage notes available", -Description)
df <- as.data.frame(t(assetDetails))
df$Description <- colnames(assetDetails)
colnames(df) = c("Data", "Description")
return(df[2:1])
return(t(assetDetails))
}
})
## USERS AND ROLES
output$assetUsersAndRoles= renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
usersAndRoles <- usersAndRolesDF0 %>%
filter(usersAndRolesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(usersAndRoles)
}
})
## ASSET DETAIL DESCRIPTION
output$assetDetailDescription = renderText({
if (input$assetChoice != "Choose a data asset") {
choice <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
return(paste0("", choice$Description))
}
})
## ASSET DETAIL DOCUMENTATION
output$assetDetailDocumentation = renderDT({
if (input$assetChoice != "Choose a data asset") {
assetDetails <- dataAssetsDF0 %>%
filter(Name == input$assetChoice)
assetsAndResources <- assetsAndResourcesDF0 %>%
filter(assetsAndResourcesDF0$dataAssetID ==  assetDetails$dataAssetID) %>%
select(-dataAssetID)
return(assetsAndResources)
}
})
}
shinyApp(ui = ui, server = server)
