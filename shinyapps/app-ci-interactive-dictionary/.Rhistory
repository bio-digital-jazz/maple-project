selected = "None")
)
), # end row
fluidRow(
column(4,
selectInput("cancerTypeFilterOne",
"Filter by data type",
multiple = TRUE,
choices = list("Boolean" = 1,
"Char" = 2,
"Date" = 3,
"Float" = 4,
"Integer" = 5,
"VarChar (variable length)" = 6),
selected = "None")
),
column(4,
# Copy the line below to make a slider range
sliderInput("coverageFilter",
"Source data coverage",
min = 0,
max = 100, value = c(0, 100))
),
column(4,
checkboxInput("checkbox",
"Include usage notes for data elements",
value = FALSE)
) # end col
), # end row
fluidRow(
column(12,
br(),
h4("Data elements"),
br(),
DT::dataTableOutput("myTable")
)
), # end row
fluidRow(
column(12,
br(),
h4("Transformation rules and coverage"),
br(),
DT::dataTableOutput("rulesAndCoverage")
)
) # end row
),# end tabPanel
tabPanel("Data types and accepted values",
p('asdfas')),
tabPanel("Coverage, quality and usage",
p('asdfas')),
tabPanel("Data Architecture and pipeline",
br(),
p(imageOutput('architecture'))))
)
server = function(input, output) {
output$myTable = DT::renderDataTable({
data
})
output$rulesAndCoverage = DT::renderDataTable({
# d = filter(rulesAndCOverage,
#coverage <= input$coverageFilter[2],
#  coverage >= input$coverageFilter[1])
rulesAndCoverage
})
output$architecture = renderImage({
list(src = './assets/img/architecture.png',
contentType = 'image/png',
width = 1300,
height = 600,
alt = "This is alternate text")
}, deleteFile = FALSE)
}
shinyApp(ui, server)
shiny::runApp()
runApp()
data = read_csv('../../../../SharedData/CIDictionaryData/dataElementsV3.csv')
rulesAndCOverage = read_csv('../../../../SharedData/CIDictionaryData/combinedRulesV3.csv')
runApp()
data = read_csv('../../../../SharedData/CIDictionaryData/dataElementsV3.csv')
rulesAndCoverage = read_csv('../../../../SharedData/CIDictionaryData/combinedRulesV3.csv')
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(dplyr)
library(readxl)
df <- readxl::read_excel('./data/CIWideDict_4.xlsx', sheet = "shinyAnalytics")
glimpse(df)
df %>%
filter(availableForUseInNSWCRIncidenceAndMortalityDataset == 1)
colnames(df)
df %>%
filter(availableForUseInNSWCRDataset == 1)
df %>%
filter(availableForUseInNSWCRDataset == 1) %>%
select(dictionaryID,
cancerInstituteName,
cancerInstituteCategory,
definition,
type,
acceptedValues)
internalNSWCRSet <- df %>%
filter(availableForUseInNSWCRDataset == 1) %>%
select(dictionaryID,
cancerInstituteName,
cancerInstituteCategory,
definition,
type,
acceptedValues)
internalNSWCRSet
library(dplyr)
library(readxl)
df <- as_tibble(df)
df %>%
filter(availableForUseInNSWCRIncidenceAndMortalityDataset == 1)
internalNSWCRSet <- df %>%
filter(availableForUseInNSWCRDataset == 1) %>%
select(dictionaryID,
cancerInstituteName,
cancerInstituteCategory,
definition,
type,
acceptedValues)
internalNSWCRSet
glimpse(df)
glimpse(internalNSWCRSet)
df
df %>%
select(dictionaryID,
elementUsageNotes)
elementUsageNotes <- df %>%
select(dictionaryID,
elementUsageNotes)
elementUsageNotes <- df %>%
select(dictionaryID,
cancerInstituteName
elementUsageNotes)
elementUsageNotes <- df %>%
select(dictionaryID,
cancerInstituteName,
elementUsageNotes)
glimpse(elementUsageNotes)
write.csv('../app-ci-interactive-dictionary/data/usageNotes.csv')
write.csv(elementUsageNotes, file = "./data/elementUsageNotes.csv")
elementUsageNotes <- df %>%
select(dictionaryID,
cancerInstituteName,
localDictID,
elementUsageNotes)
glimpse(elementUsageNotes)
write.csv(elementUsageNotes, file = "./data/elementUsageNotes.csv")
glimpse(df)
elementUsageNotes <- df %>%
select(dictionaryID,
cancerInstituteName,
sourceName,
localDictID,
elementUsageNotes)
glimpse(elementUsageNotes)
write.csv(elementUsageNotes, file = "./data/elementUsageNotes.csv")
shiny::runApp()
dataElements <- read.csv('./data/dataElementsV3.csv')
usageNotes <- read.csv('./data/elementUsageNotes.csv')
dataElements <- read.csv('./data/dataElementsV3.csv')
dataLinkages <- read.csv('./data/combinedRulesV3.csv')
usageNotes <- read.csv('./data/elementUsageNotes.csv')
library(dplyr)
library(readxl)
dataElements <- read.csv('./data/dataElementsV3.csv')
dataElements <- read.csv('./data/dataElementsV3.csv')
dataLinkages <- read.csv('./data/combinedRulesV3.csv')
usageNotes <- read.csv('./data/elementUsageNotes.csv')
glimpse(dataLinkages)
usageNotes
glimpse(usageNotes)
glimpse(dataElements)
df <- inner_join(dataElements, usageNotes, by=c("Dictionary.ID" = "dictionaryID"))
glimpse(df)
View(df)
write.csv(df, file = "./data/fullDataElementList.csv")
shiny::runApp()
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), dbname = "../../projects/DjangoProjects/data_manager/db.sqlite3")
df <- dbGetQuery(con, "SELECT * FROM auth_user")
glimpse(df)
runApp()
df <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
glimpse(df)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
glimpse(dataElementsDF0)
library(dplyr)
library(readr)
library(RSQLite)
dataElements <- read.csv('./data/dataElementsV3.csv')
dataLinkages <- read.csv('./data/combinedRulesV3.csv')
library(dplyr)
library(readr)
library(RSQLite)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
glimpse(dataElementsDF0)
dataElementUsesDFO <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse")
glimpse(dataElementUsesDFO)
dataElementsAndUsesDF0 <- dbGetQuwery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementsAndUsesDF0 <- dbGetQuwery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementsAndUsesDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
glimpse(dataElementsDF0)
glimpse(dataElementUsesDFO)
glimpse(dataElementsAndUsesDF0)
dataElementsDF1
dataElementsDF1 <- dataElementUsesDFO %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
dataElementsDF1
dataElementsDF1 <- dataElementsDF0
dataElementsDF1 <- dataElementUsesDFO %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
colnames(dataElementsDF)
colnames(dataElementsDF0)
dataElementsDF1 <- dataElementUsesDFO %>%
select(id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
dataElementsDF1 <- dataElementsDFO %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
dataElementUsesDFO <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse")
dataElementsAndUsesDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementsDF1 <- dataElementsDF0
dataElementsDF1 <- dataElementsDFO %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
source('C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/app-ci-interactive-dictionary/data/dataPrep.R', echo=TRUE)
dataElementsDF1 <-dataElementsDF0 %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
legacy_collection,
usage_notes,
accepted_values,
under_review,
category)
colnames(dataElementsDF0)
dataElementsDF1 <-dataElementsDF0 %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
accepted_values,
under_review,
category)
colnames(dataElementsDF0)
colnames(dataElementsDF1) <- c("dataElementID",
"Element ID",
"Name",
"Name is conformed",
"Type",
"Definition",
"Legacy collection",
"Usage notes",
"Accecpted")
colnames(dataElementsDF0)
colnames(dataElementsDF1)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
dataElementUsesDFO <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse")
dataElementsAndUsesDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementsDF1 <-dataElementsDF0 %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
accepted_values,
under_review,
category)
colnames(dataElementsDF1)
colnames(dataElementsDF1) <- c("dataElementID",
"Element ID",
"Name",
"Name is conformed",
"Type",
"Definition",
"Accepted values",
"Under review",
"Category")
glimpse(dataElementsDF1)
readr::write_csv(dataElementsDF1, "./data/preparedData/dataElements.csv")
dataElements = read_csv('./data/preparedData/dataElements.csv')
glimpse(dataElements)
runApp()
source('./app/components/dataElementsTab.R')
source('./app/components/dataElementUsesTab.R')
runApp()
runApp()
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
dataElementUsesDFO <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse")
dataElementsAndUsesDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementsDF1 <-dataElementsDF0 %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
accepted_values,
under_review,
category)
colnames(dataElementsDF1)
colnames(dataElementsDF1) <- c("dataElementID",
"Element ID",
"Name",
"Name is conformed",
"Type",
"Definition",
"Accepted values",
"Currently under review",
"Category")
readr::write_csv(dataElementsDF1, "./data/preparedData/dataElements.csv")
glimpse(dataElementsDF1)
glimpse(dataElementUsesDFO)
glimpse(dataElementsAndUsesDF0)
source('./app/components/dataElementsTab.R')
source('./app/components/dataElementUsesTab.R')
dataElements = as_tibble(read_csv('./data/preparedData/dataElements.csv'))
runApp()
glimpse(dataElementUsesDFO)
glimpse(dataElementsAndUsesDF0)
glimpse(dataElementsDF0)
dataElementsDF2 <- dataElementsDF0 %>%
select(id,
element_id
name)
dataElementsDF2 <- dataElementsDF0 %>%
select(id,
element_id,
name)
dataElementsDF2
inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id", "dataelement_id"))
glimpse(dataElementUsesDFO)
glimpse(dataElementsAndUsesDF0)
glimpse(dataElementsAndUsesDF0)
inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id", "dataelement_id"))
inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id", "dataelement_id"))
glimpse(dataElementsDF2)
left_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id", "dataelement_id"))
left_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
right_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
x <- right_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
glimpse(x)
x <- inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
glimpse(x)
right_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
elementsAndUseKeys <- inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
right_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
left_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
x <- left_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
glimpse(x)
View(x)
View(x)
elementsAndUseKeys <- inner_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
x <- left_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
glimpse(x)
elementsAndUseKeys <- right_join(dataElementsDF2, dataElementsAndUsesDF0, by=c("id"="dataelement_id"))
x <- left_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
glimpse(x)
a <- left_join(dataElementsAndUsesDF0, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
View(a)
View(a)
glimpse(dataElementsAndUsesDF0)
a <- left_join(dataElementUsesDFO, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
glimpse(a)
glimpse(elementsAndUseKeys)
elementsAndUsesDF1 <- left_join(dataElementUsesDFO, elementsAndUseKeys, by = c("id" = "dataelementuse_id"))
glimpse(elementsAndUsesDF1)
elementsAndUsesDF2 <- elementsAndUsesDF1 %>%
select(element_use_id,
risk_level,
null_value_accepted,
element_transformation_rules,
destination_data_asset_id,
source_data_asset_id,
destination_element_name,
source_element_name,
destination_name_is_conformed,
element_id)
glimpse(elementsAndUsesDF2)
library(dplyr)
library(readr)
library(RSQLite)
con <- dbConnect(SQLite(), "../../projects/DjangoProjects/data_manager/db.sqlite3")
dataElementsDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelement")
dataElementsAndUsesDF0 <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse_data_element")
dataElementUsesDFO <- dbGetQuery(con, "SELECT * FROM data_assets_dataelementuse")
dataElementsDF1 <-dataElementsDF0 %>%
select(id,
element_id,
name,
name_is_conformed,
type,
definition,
accepted_values,
under_review,
category)
colnames(dataElementsDF1)
colnames(dataElementsDF1) <- c("dataElementID",
"Element ID",
"Name",
"Name is conformed",
"Type",
"Definition",
"Accepted values",
"Currently under review",
"Category")
readr::write_csv(dataElementsDF1, "./data/preparedData/dataElements.csv")
library(shiny)
library(dplyr)
library(ggplot2)
library(grid)
library(DT)
library(tidyverse)
library(reshape2)
library(plotly)
source('./app/components/dataElementsTab.R')
source('./app/components/dataElementUsesTab.R')
dataElements = as_tibble(read_csv('./data/preparedData/dataElements.csv'))
runApp()
shiny::runApp()
library(shiny)
library(dplyr)
library(ggplot2)
library(grid)
library(plotly)
library(DT)
library(tidyverse)
library(reshape2)
runApp()
library(readr)
library(dplyr)
library(xlsx)
read.excel <- function(header=TRUE,...) {
read.table("clipboard",sep="\t",header=header,...)
}
dat=read.excel()
dat
