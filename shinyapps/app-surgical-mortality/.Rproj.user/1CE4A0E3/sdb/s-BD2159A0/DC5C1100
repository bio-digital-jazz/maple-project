{
    "collab_server" : "",
    "contents" : "#Removing all objects in memory\nrm(list=setdiff(ls(), \"x\"))\n\n#Loading packages\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(DT)\nlibrary(readr)\nlibrary(shinythemes)\nlibrary(scales)\nlibrary(ggbeeswarm)\nlibrary(networkD3)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(Cairo)\noptions(shiny.usecairo=T)\n\n#Loading data\ndata <- readRDS(file = \"./data/SurgicalOutcomesAppDF.Rda\")\ndata1 <- readRDS(file = \"./data/SurgicalOutcomesAppDF2.Rda\")\ndata$Count=1\n\n\n#User functions\n#Reordering layers\ninsertLayer <- function(P, after=0, ...) {\n  #  P     : Plot object\n  # after  : Position where to insert new layers, relative to existing layers\n  #  ...   : additional layers, separated by commas (,) instead of plus sign (+)\n  \n  if (after < 0)\n    after <- after + length(P$layers)\n  \n  if (!length(P$layers))\n    P$layers <- list(...)\n  else \n    P$layers <- append(P$layers, list(...), after)\n  \n  return(P)\n}\n\n###Building Shiny App\n# .nav-tabs {border-bottom: 1px solid rgb(106,66,137);} table.dataTable {line-height:0.7}\n\n##1. Shiny UI ns\n#Setting ui as a fluidPage: FluidPage enables Shiny Apps to adjust to screens of varying resolution\nui <- fluidPage(title=\"Surgical Outcomes App\",\n#CSS styling\n  tags$style(HTML(\"\n.tabbable > .nav > li > a {background-color: rgb(255,255,255);  color:black}\n.nav-tabs>li>a {border: 0px}\n.nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white;}\n.nav-tabs>li.active>a:focus {background-color: rgb(106,66,137);  color:white}\n.nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white}\n.nav-tabs>li.active>a:hover {background-color: rgb(106,66,137);  color:white}\n.nav-tabs {border-bottom: 1px solid rgb(106,66,137);}\n.irs-bar {background: rgb(106,66,137); border-top: 1px solid rgb(106,66,137); border-bottom: 1px rgb(106,66,137);}\n.irs-bar-edge {background: rgb(106,66,137); border: 1px solid rgb(106,66,137); height: 25px; border-radius: 0px; width: 20px;}\n.irs-to {background: rgb(106,66,137);}\n.irs-from {background: rgb(106,66,137);}\ntable.dataTable > thead > tr {color: white; background-color:rgb(106,66,137); text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting'] {text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting_asc'] {text-align: center;}\ntable.dataTable > thead > tr > [class='dt-right dt-center sorting_desc'] {text-align: center;}\ntable.dataTable {line-height:1}\nTable {padding-top: 10px;}\"\n        )\n  ),\n# tags$head(tags$style(HTML(\"\n#                           #FunnelPlotText1 {font-family: 'Helvetica Neue',Helvetica,Arial,sans-serif; \n#                           border: solid rgb(106,66,137) 2px;\n#                           padding-top: 10px;\n#                           padding-bottom: 10px;\n#                           padding-left: 10px;\n#                           padding-right: 10px;}\"))),\n  #Adding in titlePanel\n  titlePanel(div(HTML(\"<strong><font style = 'color: rgb(106, 66, 137)'>Surgical Outcomes App</strong></font>\"),\n                 img(src=\"CILogo.jpg\", align =\"right\", height=55))),\n  #Setting overall layout to be sidebar layout\n  sidebarLayout(\n    #Inputs to visualisation\n    #Sidebar panel\n    sidebarPanel(\n      #Select input field for LHD\n      selectInput(input = \"FacilityLHDName\",\n                  label = \"Local health district:\",\n                  choices = sort(unique(data$FacilityLHDName))\n      ),\n      #Select input field for Facility\n      selectInput(input = \"FacilityType\",\n                  label = \"Facility type:\",\n                  choices = rev(sort(unique(data$FacilityType)))\n      ),\n      #Select input field for Facility\n      selectInput(input = \"FacilityName\",\n                  label = \"Facility name:\",\n                  choices = sort(unique(data$FacilityName))\n      ),\n      #Select input field for Cancer\n      selectInput(input = \"CancerName\",\n                  label = \"Cancer:\",\n                  choices = sort(unique(data$CancerName))\n      ),\n      #Select input slider for year\n      selectInput(input = \"IndicatorName\",\n                  label = \"Indicator:\",\n                  choices = sort(unique(data$IndicatorName))\n      ),\n      #Checkbox for AllOtherOutsideLHD\n      conditionalPanel(condition = \"input.tabpanel == 1\", checkboxInput(\"AllOtherOutsideLHD\", label = \"All other outside LHD\", value = FALSE)),\n      #Checkbox for AllOtherWithinLHD\n      conditionalPanel(condition = \"input.tabpanel == 1\", checkboxInput(\"AllOtherWithinLHD\", label = \"All other within LHD\", value = FALSE))\n    ),\n    #Main panel\n    mainPanel(\n      #Creating tabs for main panel\n      tabsetPanel(id = \"tabpanel\",\n        type = \"tabs\",\n                  #Tab 1: Activity\n                  tabPanel(\"Funnel\",\n                           #Plotting SurgicalOutcomesGG\n                           plotlyOutput(\"SurgicalOutcomesGG\",  height = 450),\n                           htmlOutput(\"FunnelPlotText1\"),\n                           value = 1),\n                           # dataTableOutput(\"table\"),\n                           # dataTableOutput(\"test\"),\n                           # dataTableOutput(\"test1\"),\n                           # textOutput(\"test2\"),\n                           # dataTableOutput(\"test3\")),\n                  #Tab 2: EWMA\n                  tabPanel(\"Moving average\",\n                           plotOutput(\"SurgicalOutcomesGG2\", height = 450)),\n                  #Tab 3: Data\n                  tabPanel(\"Data\",\n                           htmlOutput(\"DataText\")),\n                  #Tab 4 Notes\n                  tabPanel(\"Notes\",\n                           htmlOutput(\"NotesText\"))\n    )\n  )\n)\n)\n\n##2. Shiny server\n#Setting up Shiny server\nserver <- function(input, output, session) {\n  \n  #Setting observeEvent to update Facility select input as user selects LHD\n  observeEvent(input$FacilityLHDName, {\n    #Updating FacilityType\n    updateSelectInput(session, \"FacilityType\",\n                      choices = rev(sort(unique(data$FacilityType[data$FacilityLHDName == input$FacilityLHDName]))))\n  })\n  #Setting observeEvent to update FacilityName select input as user selects LHD and FacilityType\n  observeEvent(c(input$FacilityType, input$FacilityLHDName), {\n    #Updating FacilityName\n    updateSelectInput(session, \"FacilityName\",\n                      choices = sort(unique(data$FacilityName[data$FacilityType == input$FacilityType &\n                                                                data$FacilityLHDName == input$FacilityLHDName])))\n  })\n  #Setting observeEvent to update Cancer select input as user selects LHD, FacilityType, and FacilityName\n  observeEvent(c(input$FacilityType, input$FacilityLHDName, input$FacilityName), {\n    #Updating CancerName\n    updateSelectInput(session, \"CancerName\",\n                      choices = sort(unique(data$CancerName[data$FacilityType == input$FacilityType &\n                                                                data$FacilityLHDName == input$FacilityLHDName &\n                                                                data$FacilityName == input$FacilityName])))\n  })\n  #Setting observeEvent to update IndicatorName select input as user selects LHD, FacilityType, FacilityName, and CancerName\n  observeEvent(c(input$FacilityType, input$FacilityLHDName, input$FacilityName, input$CancerName), {\n    #Updating \n    updateSelectInput(session, \"IndicatorName\",\n                      choices = sort(unique(data$IndicatorName[data$FacilityType == input$FacilityType &\n                                                              data$FacilityLHDName == input$FacilityLHDName &\n                                                              data$FacilityName == input$FacilityName &\n                                                              data$CancerName == input$CancerName])))\n  })\n\n  #Generating plots\n  #Tab 1: Activity\n  #Generating main reactive dataframe for Activity Tab\n  rdfTab1Activity <- reactive({\n    subset(data,\n           FacilityLHDName == input$FacilityLHDName & \n             FacilityType == input$FacilityType &\n             FacilityName == input$FacilityName &\n             CancerName == input$CancerName &\n             IndicatorName == input$IndicatorName\n           )\n    })\n  #Generating reactive dataframe for NSW subset\n  rdfTab1NSW = reactive({\n    subset(data, \n           FacilityLHDName == \"NSW\" &\n             FacilityType == input$FacilityType &\n             FacilityName == \"NSW\" &\n             CancerName == input$CancerName &\n             IndicatorName == input$IndicatorName\n           )\n    })\n  #Generating reactive NSWMean value\n  NSWMean = reactive({rdfTab1NSW()$FacilityMeanRaw})\n  #Generating reactive data frame for all other facilities for the same \n  rdfTab1FacilityOther = reactive({\n    subset(data,\n           FacilityType == input$FacilityType &\n             FacilityName != \"NSW\" &\n             CancerName == input$CancerName &\n             IndicatorName == input$IndicatorName\n    )\n  })\n  #reactive frame for all other within LHD\n  rdfTab1FacilityOtherWithinLHD = reactive({\n    subset(data,\n           FacilityLHDName == input$FacilityLHDName &\n           FacilityType == input$FacilityType &\n             FacilityName != \"NSW\" &\n             FacilityName != input$FacilityName &\n             CancerName == input$CancerName &\n             IndicatorName == input$IndicatorName\n           )\n    })\n\n  #reactive frame for all other within LHD\n  rdfTab1FacilityOtherOutsideLHD = reactive({\n    subset(data,\n           FacilityLHDName != input$FacilityLHDName &\n           FacilityType == input$FacilityType &\n             FacilityName != \"NSW\" &\n             CancerName == input$CancerName &\n             IndicatorName == input$IndicatorName\n    )\n  })\n\n\n  # derive maximum x-axis value\n  XMax = reactive({max(100, rdfTab1FacilityOther()$FacilityN * 1.1, na.rm=TRUE)})\n  \n  # helper function\n  fMakeFunnelPolygons = function(Mean, XMax, YMin=0, YMax=1) {\n    \n    #\n    if(Mean > 1) Mean = 1\n    if(Mean < 0) Mean = 0\n    \n    # Conpute the funnels based on beta distribution\n    XMax = XMax * 1.0\n    P = round(Mean, 2)\n    Q = 1 - P\n    N = 1:XMax\n    E = N * P\n    \n    Y2SDLow  = qbeta(0.023, E, N-E+1)\n    Y2SDHigh = qbeta(0.977, E+1, N-E)\n    \n    Y3SDLow  = qbeta(0.0013, E, N-E+1)\n    Y3SDHigh = qbeta(0.9987, E+1, N-E)\n    \n    # clip the polygons here based on the 2x YLims\n    Y2SDLow[Y2SDLow < YMin] = YMin\n    Y2SDHigh[Y2SDHigh > YMax] = YMax\n    Y2SD = c(Y2SDHigh, rev(Y2SDLow))\n    \n    Y3SDLow[Y3SDLow < YMin] = YMin\n    Y3SDHigh[Y3SDHigh > YMax] = YMax\n    Y3SD = c(Y3SDHigh, rev(Y3SDLow))\n    \n    X = c(N, rev(N))\n    \n    data.frame(X=X, Y2SD = Y2SD, Y3SD = Y3SD)\n  }\n  \n  \n  #Plotting funnel plot\n  output$SurgicalOutcomesGG <-\n    renderPlotly({\n      #Setting up validation to create custom error messages\n      validate(\n        #Validate that user has to input all data\n        need(nrow(rdfTab1Activity())>0, \"\")\n      )\n      #Setting up funnel plot\n      p <- ggplot(data = rdfTab1Activity()) +\n        #Setting  x and y limits\n        coord_cartesian(xlim=c(0,XMax()), ylim=c(0,1)) +\n        #Y2SD polygon layer\n        geom_polygon(data = fMakeFunnelPolygons(NSWMean(), XMax(), 0, 1), aes(x = X, y = Y2SD), fill = \"#BEBEBE70\", colour = NA) +\n        #Y3SD polygon layer\n        geom_polygon(data = fMakeFunnelPolygons(NSWMean(), XMax(), 0, 1), aes(x = X, y = Y3SD), fill = \"#BEBEBE70\", colour = NA) +\n        #NSW mean layer\n        geom_hline(yintercept = NSWMean(), colour=\"dodgerblue2\", aes(label = \"\")) +\n        #Rug layer of all other facilities\n        geom_rug(data=rdfTab1FacilityOther(), aes(FacilityN), colour=\"darkgrey\") +\n        #Adding in labels for plot\n        labs (x = \"Total volume 2014-17\", y=\"Proportion\")\n      #Default plot\n      p <- p +\n        #Adjusted mean layer of facility of interest\n        geom_point(data = rdfTab1Activity() %>%\n                     select(FacilityMeanRaw, FacilityN, FacilityName) %>%\n                     mutate(Group = \"Raw Mean\") %>%\n                     rename(FacilityMean = FacilityMeanRaw) %>%\n                     rbind(rdfTab1Activity() %>%\n                             select(FacilityMeanMarg, FacilityN, FacilityName) %>%\n                             rename(FacilityMean = FacilityMeanMarg) %>%\n                             mutate(Group = \"Adjusted Mean\"))\n                   ,aes(text=paste(FacilityName, ' (',Group,')', sep = \"\"), x=FacilityN, y=FacilityMean, color = Group), size = 2) +\n        #Line layer conneting points of adjusted and raw mean\n        geom_segment(data = rdfTab1Activity(), aes(x=FacilityN, y=FacilityMeanRaw, xend=FacilityN, yend=FacilityMeanMarg)) +\n        scale_color_manual(\"Selected facility\", values=c(rgb(106,66,137, maxColorValue = 255),\n                                                         rgb(245,130,32, maxColorValue = 255))) +\n        theme(legend.text=element_text(size=9))\n      #Additional plots conditional on checkbox AllOtherOutsideLHD\n      #If AllOtherOutsideLHD checked, plot the following\n      if (input$AllOtherOutsideLHD & !input$AllOtherWithinLHD) {\n        #Default plot settings\n        p <- insertLayer(p, after = 3, (geom_point(data = rdfTab1FacilityOtherOutsideLHD(), aes(text=paste(FacilityName), x=FacilityN, y=FacilityMeanMarg, fill = \"Outside LHD\"), size = 2, shape = 21)))\n        p <- p + scale_fill_manual(\"Other facilities\", values = c(NA))\n      } \n      else if (input$AllOtherWithinLHD & !input$AllOtherOutsideLHD) {\n        p <-  insertLayer(p, after = 3, (geom_point(data = rdfTab1FacilityOtherWithinLHD() %>%\n                                                         mutate(Group = \"Within LHD\"), aes(text=paste(FacilityName), x=FacilityN, y=FacilityMeanMarg, fill = Group), size = 2, shape = 21, stroke = 1)))\n        p <- p + scale_fill_manual(\"Other facilities\", values = c(rgb(0,171,230, maxColorValue = 255)))\n        } else if (input$AllOtherWithinLHD & input$AllOtherOutsideLHD) {\n        p <- insertLayer(p, after = 3, geom_point(data = rdfTab1FacilityOtherOutsideLHD() %>%\n                                          mutate(Group = \"Outside LHD\"),\n                                        aes(text=paste(FacilityName), x=FacilityN, y=FacilityMeanMarg, fill = Group), size = 2, shape = 21))\n        p <- insertLayer(p, after = 3,geom_point(data = rdfTab1FacilityOtherWithinLHD() %>%\n                       mutate(Group = \"Within LHD\"),\n                     aes(text=paste(FacilityName), x=FacilityN, y=FacilityMeanMarg, fill = Group), size = 2, shape = 21))\n        p <- p + scale_fill_manual(\"Other facilities\", values = c(NA,  rgb(0,171,230, maxColorValue = 255)))\n        }\n      p <- ggplotly(p, tooltip=\"text\") %>%\n        layout(showlegend = FALSE)\n    })\n  \n  output$FunnelPlotText1 <-renderText({paste(\"<b>Observations</b> <br>\", \n                                             \"Between 2014-17 \",input$FacilityName,\" had \", rdfTab1Activity()$FacilityN,\" \", input$CancerName ,\" procedures. <br>\",\n                                             \"For the same time period, the adjusted and raw proporiton of \", input$IndicatorName, \" for \", input$FacilityName, \" were \", round(rdfTab1Activity()$FacilityMeanMarg*100, 2), \"%\", \" and \",\n                                             round(rdfTab1Activity()$FacilityMeanRaw*100, 2), \"% respectively.\",\n                                             \"<br>\",\"<br>\",\n                                             \"<b>Insights</b> <br>\",\n                                             \"Any insights listed here…\", sep = \"\")})\n  \n  # , color = rgb(106,66,137, maxColorValue = 255)\n  # , color = rgb(245,130,32, maxColorValue = 255), alpha = 0.75\n  #Tab 2: EWMA\n  #Generating main reactive dataframe for EWMA Tab\n  rdfTab2EWMA <- reactive({data1 %>%\n    filter(CancerName == input$CancerName,\n           FacilityName == input$FacilityName,\n           IndicatorName == input$IndicatorName) %>%\n    na.omit()})\n\n\n  #Setting maximum Y axis range\n  YMax = 1\n\n  #Plotting EWMA plot\n  output$SurgicalOutcomesGG2 <-\n    renderPlot({\n      #Setting up validation to create custom error messages\n      validate(\n        #Generate custom error message if no dataframe available\n        need(nrow(rdfTab2EWMA())>0, \"The selected facility does not have sufficient data points for plotting\")\n        )\n      #Setting plot resolution\n      #Plotting EWMA plot\n      ggplot(data = rdfTab2EWMA()) +\n        #Setting  x and y limits\n        coord_cartesian(xlim=c(0,40), ylim=c(0,YMax)) +\n        #Layer ribbon (area between EWMA2SigmaLow and EWMA2SigmaHigh)\n        geom_ribbon(aes(ymin = EWMA2SigmaLow, ymax = EWMA2SigmaHigh, x=EWMAX2), alpha = 0.5, fill = \"#BEBEBE70\") +\n        #Layer for line plot EWMA2SigmaLow\n        # geom_line(aes(x = EWMAX2, y = EWMA2SigmaLow)) +\n        # #Layer for line plot EWMA2SigmaHigh\n        # geom_line(aes(x = EWMAX2, y = EWMA2SigmaHigh)) +\n        #Layer for line plot EWMAY\n        geom_line(aes(x = EWMAX2, y = EWMAY), size=0.5, linetype = \"dashed\") +\n        #Layer for point EWMAY\n        geom_point(aes(x = EWMAX2, y = EWMAY), size = 3, colour = rgb(106,66,137, maxColorValue = 255)) +\n        #Replacing x labels with YYYYQ\n        scale_x_continuous(labels = rdfTab2EWMA()$XLabel, breaks = rdfTab2EWMA()$EWMAX2) + \n        #Rotating x axis labels\n        theme(axis.text.x=element_text(angle=90,hjust=1)) +\n        #Naming x and y axis\n        labs (x = \"Quarter 2008-17\", y=\"Proportion\")\n      })\n  \n  #Tab 3: Data\n  output$DataText <- renderText(paste(\"Data goes here – if appropriate\"))\n  # , colourScale=my_color\n  \n  #Tab 4: Notes\n  output$NotesText <- renderText(paste(\"Lorem ipsum dolor amet mlkshk ugh sartorial shabby chic schlitz XOXO portland fam ethical sriracha swag af. Plaid try-hard forage lomo sustainable. Fam fixie distillery succulents +1 crucifix tacos, keffiyeh aesthetic cardigan. Activated charcoal godard air plant, helvetica chambray bicycle rights YOLO pickled squid. Marfa affogato twee humblebrag.\"))\n}\n\n\n\n\n#Run App\nshinyApp(ui, server)\n\n",
    "created" : 1539034160564.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "483038415",
    "id" : "DC5C1100",
    "lastKnownWriteTime" : 1539036706,
    "last_content_update" : 1539037877591,
    "path" : "H:/Restricted Share/Metadata Repository Project/Projects/app-surgical-mortality/archive/app-test.R",
    "project_path" : "archive/app-test.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}