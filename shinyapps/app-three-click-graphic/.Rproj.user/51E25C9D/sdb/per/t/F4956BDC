{
    "collab_server" : "",
    "contents" : "#Removing all objects in memory\nrm(list=setdiff(ls(), \"x\"))\n\n#Loading packages\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(DT)\nlibrary(readr)\nlibrary(shinythemes)\nlibrary(scales)\nlibrary(ggbeeswarm)\nlibrary(networkD3)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(Cairo)\noptions(shiny.usecairo=T)\n\n\n### Constants - colours from RBCO chart\nkColPurple = \"#48156BBF\"\nkBarCols = c(\n  rgb( 74/256,  37/256, 116/256),\n  rgb(168/256, 143/256, 190/256),\n  rgb(128/256,  39/256, 122/256),\n  rgb(206/256, 178/256, 205/256),\n  rgb(  9/256, 168/256, 224/256),\n  rgb(  0/256,  86/256, 161/256),\n  rgb(134/256, 151/256, 204/256))\n  \n\n### Import & Tidy & Transform\n## Fun plot\n# grab some data\nImage1 = png::readPNG(\"./www/Drugs2.png\")\n\nRast1  = grid::rasterGrob(Image1, interpolate = T, height = 1, width = 1)\nLine = data.frame(Year = 2009:2019,\n                  Spend = 6:16 + rnorm(11))\nPoly = rbind(c(0,0), Line, c(2020, 100), c(0,100))\n\n\n###Building Shiny App\n\n##1. Shiny UI ns\n#Setting ui as a fluidPage: FluidPage enables Shiny Apps to adjust to screens of varying resolution\nui <- fixedPage(title=\"Infographic\", fixedRow(offset = 0,\n                #CSS styling\n                tags$style(HTML(\"\n                                .tabbable > .nav > li > a {background-color: rgb(255,255,255);  color:black}\n                                .nav-tabs>li>a {border: 0px}\n                                .nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white;}\n                                .nav-tabs>li.active>a:focus {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs>li.active>a:hover {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs {border-bottom: 1px solid rgb(106,66,137);}\n                                .irs-bar {background: rgb(106,66,137); border-top: 1px solid rgb(106,66,137); border-bottom: 1px rgb(106,66,137);}\n                                .irs-bar-edge {background: rgb(106,66,137); border: 1px solid rgb(106,66,137); height: 25px; border-radius: 0px; width: 20px;}\n                                .irs-to {background: rgb(106,66,137);}\n                                .irs-from {background: rgb(106,66,137);}\n                                table.dataTable > thead > tr {color: white; background-color:rgb(106,66,137); text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting'] {text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting_asc'] {text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting_desc'] {text-align: center;}\n                                table.dataTable {line-height:1}\n                                Table {padding-top: 10px;}\n                                \"\n                )\n                ),\n                tags$head(tags$style(\n                  type=\"text/css\",\n                  \"#Infographic img, {width: 60%;\n                   display: block;\n                   margin-left: auto;\n                   margin-right: auto;}\")),\n                #Adding in titlePanel\n                titlePanel(div(HTML(\"<strong><font style = 'color: rgb(106, 66, 137)'>Infographic</strong></font>\"),\n                               img(src=\"CILogo.jpg\", align =\"right\", height=55))),\n                #Main panel\n                mainPanel(width = 12,\n                    # Creating tabs for main panel\n                    column(width = 12),\n                    tabsetPanel(id = \"tabpanel\",\n                                position = \"centre\",\n                                type = \"tabs\",\n                                #Tab 1: Infographic\n                                tabPanel(\"Infographic\",\n                                         br(),\n                                         #Plotting Radiotherapy Distance Levels\n                                         div(plotOutput(\"Infographic\"), align = \"center\"),\n                                         value = 1\n                                         ),\n                                #Tab 2: Graph 1\n                                tabPanel(\"Graph 1\",\n                                         br(),\n                                         #Plotting Radiotherapy Distance Proportions\n                                         plotOutput(\"FormalPlotCol\", height = 450),\n                                         value = 2\n                                ),\n                                #Tab 3: Table\n                                tabPanel(\"Table\",\n                                         br(),\n                                         #Plotting Radiotherapy Distance Map\n                                         dataTableOutput(\"LineDF\"),\n                                         value = 3),\n                                #Tab 4: Notes\n                                tabPanel(\"Notes\",\n                                         #Plotting Radiotherapy Distance Map\n                                         # plotOutput(\"RadiotherapyDistanceMap\"),\n                                         htmlOutput(\"notes\"))\n                    )\n                )\n)\n)\n\n\n##2. Shiny server\n#Setting up Shiny server\nserver <- function(input, output, session) {\n  \n  \n  #Plotting visualisations\n  #Tab 1: Radiotherapy Distance Levels\n  # Tab1: Infographic\n  output$Infographic = renderPlot({ggplot() +\n    annotation_custom(Rast1, ymin = 0, ymax = 20, xmin = 2009) +\n    coord_cartesian(xlim=c(2009,2018), ylim=c(4,20)) +\n    geom_line(data=Line, aes(x=Year, y=Spend), size=10, colour=\"red\") +\n    geom_polygon(data=Poly, aes(x=Year, y=Spend), fill=\"white\") + \n    labs(title=\"Drug prices soaring!\", subtitle=\"Infographic\",\n         x=\"Year\", y=\"Annual drug spend ($ million)\",\n         caption=\"Source: PBAC etc\") + \n      theme(plot.title = element_text(size=25, face = \"bold\"),\n            plot.subtitle = element_text(size=15)) +\n      theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank())\n    }  , height = 800, width = 800)\n  \n  # \n\n  \n  #Tab 2: Graph 1\n  output$FormalPlotCol <- renderPlot({ggplot() + \n        geom_col(data=Line, aes(x=Year, y=Spend), fill = rgb(106,66,137, maxColorValue = 256)) + \n        coord_cartesian(xlim=c(2008.5,2019), ylim=c(0,20)) +\n        scale_x_discrete(limits=2009:2018) +\n        labs(title=\"Drug prices increasing over time\", subtitle=\"Publication quality plot\",\n             x=\"Year\", y=\"Annual drug spend ($ million)\",\n             caption=\"Source: PBAC etc\") +\n      theme(plot.title = element_text(size=20, face = \"bold\"),\n            plot.subtitle = element_text(size=12))\n  })\n\n  #Tab 3: Table\n  output$LineDF <- renderDataTable({Line\n    })\n  \n  # #Tab 4: Notes\n  output$notes<- renderUI({\n    str1<-paste(\"Data Source = XXX\")\n    str2<-paste(\"This is a summary of annual drug spend for cancer drugs by NSW etc\")\n    str3<-paste(\"Cancer Institute NSW 2018\")\n    url <- a(\"https://www.cancer.nsw.gov.au/\", href=\"https://www.cancer.nsw.gov.au/\")\n    str4<-paste(\"For further info go to\", tagList(\"URL link:\", url))\n    HTML(paste(str1, str2, str3, str4, sep = '<br/>'))})\n  }\n\n#Run App\nshinyApp(ui, server)\n\n",
    "created" : 1539043987903.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3096666169",
    "id" : "F4956BDC",
    "lastKnownWriteTime" : 1538954216,
    "last_content_update" : 1538954216,
    "path" : "C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/app-three-click-graphic/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}