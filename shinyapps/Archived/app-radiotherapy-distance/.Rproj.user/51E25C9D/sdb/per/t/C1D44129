{
    "collab_server" : "",
    "contents" : "#Removing all objects in memory\nrm(list=setdiff(ls(), \"x\"))\n\n#Loading packages\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(data.table)\nlibrary(DT)\nlibrary(readr)\nlibrary(shinythemes)\nlibrary(scales)\nlibrary(ggbeeswarm)\nlibrary(networkD3)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(Cairo)\noptions(shiny.usecairo=T)\n\n\n### Constants - colours from RBCO chart\nkColPurple = \"#48156BBF\"\nkBarCols = c(\n  rgb( 74/256,  37/256, 116/256),\n  rgb(168/256, 143/256, 190/256),\n  rgb(128/256,  39/256, 122/256),\n  rgb(206/256, 178/256, 205/256),\n  rgb(  9/256, 168/256, 224/256),\n  rgb(  0/256,  86/256, 161/256),\n  rgb(134/256, 151/256, 204/256))\n  \n\n### Import & Tidy & Transform\n\n#Importing radiotherapy dataset\nRadioTXDF0 = readRDS(file = \"./data/RadiotherapyDistanceApp.Rda\")\n\n#Derive a summary table of radio facilities\nRadioFacilities = RadioTXDF0 %>%\n  dplyr::group_by(TXFacilityName, TXFacilityLong, TXFacilityLat) %>%\n  dplyr::summarise() %>%\n  na.omit()\n\n#Importing LHD polygons\nLHDPolygons = readr::read_csv(\"./data/LHDMapCoords.csv\")\n\n\n###Building Shiny App\n\n##1. Shiny UI ns\n#Setting ui as a fluidPage: FluidPage enables Shiny Apps to adjust to screens of varying resolution\nui <- fluidPage(title=\"Radiotherapy Distance App\",\n                #CSS styling\n                tags$style(HTML(\"\n                                .tabbable > .nav > li > a {background-color: rgb(255,255,255);  color:black}\n                                .nav-tabs>li>a {border: 0px}\n                                .nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white;}\n                                .nav-tabs>li.active>a:focus {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs>li.active> a {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs>li.active>a:hover {background-color: rgb(106,66,137);  color:white}\n                                .nav-tabs {border-bottom: 1px solid rgb(106,66,137);}\n                                .irs-bar {background: rgb(106,66,137); border-top: 1px solid rgb(106,66,137); border-bottom: 1px rgb(106,66,137);}\n                                .irs-bar-edge {background: rgb(106,66,137); border: 1px solid rgb(106,66,137); height: 25px; border-radius: 0px; width: 20px;}\n                                .irs-to {background: rgb(106,66,137);}\n                                .irs-from {background: rgb(106,66,137);}\n                                table.dataTable > thead > tr {color: white; background-color:rgb(106,66,137); text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting'] {text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting_asc'] {text-align: center;}\n                                table.dataTable > thead > tr > [class='dt-right dt-center sorting_desc'] {text-align: center;}\n                                table.dataTable {line-height:1}\n                                Table {padding-top: 10px;}\"\n                )\n                ),\n                #Adding in titlePanel\n                titlePanel(div(HTML(\"<strong><font style = 'color: rgb(106, 66, 137)'>Radiotherapy Distance App</strong></font>\"),\n                               img(src=\"CILogo.jpg\", align =\"right\", height=55))),\n                #Setting overall layout to be sidebar layout\n                sidebarLayout(\n                  #Inputs to visualisation\n                  #Sidebar panel\n                  sidebarPanel(\n                    #Select input field for CancerCode\n                    selectInput(input = \"CancerCode\",\n                                label = \"Cancer code: \",\n                                choices = sort(unique(RadioTXDF0$Cancer))\n                    ),\n                    #Conditional for LHDName select input to appear only when on the Map tab\n                    conditionalPanel(\n                      condition = \"input.tabpanel == 3\", selectInput(input = \"LHDName\",\n                                                                     label = \"Local health district: \",\n                                                                     choices = sort(unique(RadioTXDF0$ResidentLHDName))\n                      )\n                    )\n                  ),\n                  #Main panel\n                  mainPanel(\n                    #Creating tabs for main panel\n                    tabsetPanel(id = \"tabpanel\",\n                                type = \"tabs\",\n                                #Tab 1: Radiotherapy Distance Levels\n                                tabPanel(\"Radiotherapy Distance Levels\",\n                                         br(),\n                                         #Plotting Radiotherapy Distance Levels\n                                         plotOutput(\"RadiotherapyDistanceLevels\",  height = 450),\n                                         value = 1\n                                         ),\n                                #Tab 2: Radiotherapy Distance Proportions\n                                tabPanel(\"Radiotherapy Distance Proportion\",\n                                         br(),\n                                         #Plotting Radiotherapy Distance Proportions\n                                         plotOutput(\"RadiotherapyDistanceProportion\", height = 450),\n                                         value = 2\n                                ),\n                                #Tab 3: Map\n                                tabPanel(\"Map\",\n                                         #Plotting Radiotherapy Distance Map\n                                         plotOutput(\"RadiotherapyDistanceMap\"),\n                                         value = 3)\n                                )\n                    )\n                  )\n                )\n\n\n##2. Shiny server\n#Setting up Shiny server\nserver <- function(input, output, session) {\n  \n  #Setting observeEvent to update Facility select input as user selects LHD\n  observeEvent(input$CancerCode, {\n    #Updating FacilityType\n    updateSelectInput(session, \"LHDName\",\n                      choices = (sort(unique(RadioTXDF0$ResidentLHDName[RadioTXDF0$Cancer == input$CancerCode]))))\n    })\n  \n  #Generating reactive dataframes for plots\n  #Reactive dataframe to subset CancerCodes\n  RadioTXDF1 <- reactive({\n    subset(RadioTXDF0,\n           Cancer == input$CancerCode\n    )\n  })\n  \n  #Reactive dataframe to generate cancer specific and LHD specific dataframe\n  RadioTXDF2 <- reactive({\n    subset(RadioTXDF1(),\n           ResidentLHDName == input$LHDName)\n  })\n\n  #Reactive dataframe to generate counts of patients by ResidentLHDName and DistanceExcess1Cat\n  RadioTXDF3 = reactive({RadioTXDF1() %>%\n      group_by(ResidentLHDName, DistanceExcess1Cat) %>%\n      summarize(Freq = n()) %>%\n      ungroup()\n  })\n\n  #Reactive dataframe to generate counts of patients by ResidentLHDName and DistanceExcess1Cat\n  RadioTXDF4 = reactive({RadioTXDF3() %>%\n      group_by(ResidentLHDName) %>%\n      mutate(Total = sum(Freq)) %>%\n      ungroup() %>%\n      mutate(Prop = Freq/Total)})\n\n  #Reactive LHD specific polygon for map\n  LHDXPolygon = reactive({LHDPolygons %>%\n    filter(LHDName==input$LHDName)})\n  \n  #Reactive plot coords based on LHD and journeys to set the plot region for the map\n  XMax = reactive({max(LHDXPolygon()$Long, RadioTXDF2()$ResidentLong, RadioTXDF2()$TXFacilityLong, na.rm=TRUE)})\n  XMin = reactive({min(LHDXPolygon()$Long, RadioTXDF2()$ResidentLong, RadioTXDF2()$TXFacilityLong, na.rm=TRUE)})\n  XRange = reactive({XMax() - XMin()})\n  YMax = reactive({max(LHDXPolygon()$Lat, RadioTXDF2()$ResidentLat, RadioTXDF2()$TXFacilityLat, na.rm=TRUE)})\n  YMin = reactive({min(LHDXPolygon()$Lat, RadioTXDF2()$ResidentLat, RadioTXDF2()$TXFacilityLat, na.rm=TRUE)})\n  YRange = reactive({YMax() - YMin()})\n  \n  reactive({if (XRange() / 1.3 > YRange()) {\n    YRange = XRange() / 1.3\n  } else {\n    XRange = YRange() * 1.3\n  }})\n  \n  \n  #Plotting visualisations\n  #Tab 1: Radiotherapy Distance Levels\n  output$RadiotherapyDistanceLevels <- renderPlot({ggplot() + \n      geom_bar(data = RadioTXDF3() %>%\n                 filter(!is.na(RadioTXDF3()$ResidentLHDName)), \n               aes(x = ResidentLHDName, weight = Freq, fill = factor(DistanceExcess1Cat, levels=c(\"500km+\", \"251-500km\", \"101-250km\",  \"51-100km\",  \"11-50km\", \"Nearest\"), ordered = TRUE))) +\n      ggplot2:::manual_scale('fill', values = setNames(kBarCols,\n                                                       c(\"Nearest\", \"11-50km\",  \"51-100km\", \"101-250km\", \"251-500km\", \"500km+\"))) + \n      labs(fill=\"Distance\") + \n      ggtitle(paste0(\"Excess travel: \", input$CancerCode)) + \n      theme(plot.title = element_text(size=18)) + \n      xlab(\"\") +\n      ylab(\"Count\") +\n      coord_flip()\n    })\n  \n  #Tab 2: Radiotherapy Distance Proportion\n  output$RadiotherapyDistanceProportion <- renderPlot({ggplot() + \n      geom_bar(data = RadioTXDF4() %>%\n                 filter(!is.na(RadioTXDF4()$ResidentLHDName)), \n               aes(x = ResidentLHDName, weight = Prop, fill = factor(DistanceExcess1Cat, levels=c(\"500km+\", \"251-500km\", \"101-250km\",  \"51-100km\",  \"11-50km\", \"Nearest\"), ordered = TRUE))) +\n      ggplot2:::manual_scale('fill', values = setNames(kBarCols,\n                                                       c(\"Nearest\", \"11-50km\",  \"51-100km\", \"101-250km\", \"251-500km\", \"500km+\"))) + coord_flip() + labs(fill=\"Distance\")  + ggtitle(paste0(\"Excess travel: \", input$CancerCode)) + \n      theme(plot.title = element_text(size=18)) + \n      scale_y_continuous(labels = scales::percent) +\n      theme(plot.title = element_text(size=18)) +\n      xlab(\"\") +\n      ylab(\"Percent\")\n  })\n  \n  #Tab 3: Radiotherapy Distance Map\n  output$RadiotherapyDistanceMap = renderPlot({ggplot() + \n      coord_fixed(xlim=c(XMin(),XMax()), ylim=c(YMin(), YMax())) +\n      geom_polygon(data=LHDPolygons, \n                   aes(x=Long, y=Lat, group=LHDSegment),\n                   colour = NA, fill=\"lightgrey\", size=0) +\n      geom_polygon(data=LHDXPolygon(), aes(x=Long, y=Lat, group=LHDSegment),\n                   colour = NA, fill=\"darkgrey\", size=0) +\n      geom_segment(data = RadioTXDF2(),\n                   aes(x = ResidentLong, y = ResidentLat, xend = TXFacilityLong, yend = TXFacilityLat, colour=DistanceExcess1Cat),\n                   alpha=0.5, size=1.25) +\n      geom_polygon(data=LHDXPolygon(), aes(x=Long, y=Lat, group=LHDSegment),\n                   colour = \"white\", fill=NA, size=0.5) +\n      geom_point(data=RadioFacilities,\n                 aes(x=TXFacilityLong, y=TXFacilityLat), colour=\"red\", size=1) + \n      facet_wrap(. ~ DistanceExcess1Cat, ncol = 2) +\n      scale_color_manual(values = kBarCols, name = \"Excess Travel\") +\n      theme(strip.background =element_rect(fill=kBarCols)) +\n      theme(strip.text = element_text(colour = 'white', size = 12)) + \n      guides(colour=FALSE)\n    \n  }) \n  }\n\n\n#Run App\nshinyApp(ui, server)\n\n",
    "created" : 1539037672356.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "265309575",
    "id" : "C1D44129",
    "lastKnownWriteTime" : 1538954504,
    "last_content_update" : 1538954504,
    "path" : "C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/app-radiotherapy-distance/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}