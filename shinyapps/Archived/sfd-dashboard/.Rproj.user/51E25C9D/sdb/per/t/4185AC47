{
    "collab_server" : "",
    "contents" : "library(fpp2)\nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(png)\nlibrary(flexdashboard)\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(plotly)\nlibrary(scales)\nlibrary(lubridate)\nlibrary(Cairo)\nlibrary(shinydashboard)\nlibrary(zoo)\n\n\n\n\n##########################################\n### Set date\nCurrentYear <- as.numeric(format(Sys.Date(), \"%Y\"))\nCurrentMon <- as.numeric(format(Sys.Date(), \"%m\"))\nCurrentDay <- as.numeric(format(Sys.Date(), \"%d\"))\n\n\n\n\n## Top level data\nStatedata <- list(\"./Data/TopDashboard1MonDataDF.Rda\", \"./Data/TopDashboard2MonDataTS.Rda\")\nlapply(Statedata,load,.GlobalEnv)\n\nStateDF <- TopMonDataDF\nStateTS <- TopMonDataTS\n\n\n## SAS level data\nSASlist <- list(\"GSSW\", \"GW\" , \"HNE\", \"NC\", \"NSCC\", \"SESI\", \"SWS\", \"SYD\", \"SW\")\nSASdata <- list(\"./Data/SASDashboard1MonDataDF.Rda\", \"./Data/SASDashboard2MonDataTS.Rda\")\nlapply(SASdata,load,.GlobalEnv)\n\n\n\n\n## Age level data\nAgeList <- list( \"40-49\"= \"4049\" , \"50-69\" = \"5069\", \"70-74\" = \"7074\", \"75 plus\" = \"75\")\nAgeData <- list(\"./Data/AgeDashboard1MonDataDF.Rda\", \"./Data/AgeDashboard2MonDataTS.Rda\")\nlapply(AgeData,load,.GlobalEnv)\n\n\n#############################################\n###### UI\nui <- fluidPage(\n  tags$style(HTML(\"\n                  .box.box-solid.box-primary{\n                  background:#F3F3F4\n                  }\n                  \")),\n  box(width = 12, height = 67, status = \"primary\", solidHeader = TRUE,\n      fluidRow(column(width=2, align=\"left\", img(src = \"Top.png\")))),\n  \n  tabsetPanel( \n    tabPanel(h4(\"Forecast\"), fluid = TRUE, \n             h3(\"Breast Screen Forecasting Dashboard\"),              \n             sidebarLayout(\n               sidebarPanel (\n                 radioButtons(\"response1\", \"Forecasting level\", choices = list (\"State\" = \"State\",  \"SAS\" = \"SAS\", \"Age group\" = \"Age\"),selected = \"State\"), br(), br(),\n                 conditionalPanel(\n                   condition = \"input.response1 == 'State'\",\n                   column(6, selectInput(\"State1\", \"\", choices = list( \"Total screens\" =\"Total_Screeners\", \"Inital screens\"  = \"Initial_Screeners\",\n                                                                       \"Re-screen\" = \"Re_Screeners\", \"Arabic screeners\"= \"Arabic_Screeners\",\n                                                                       \"ATSI screeners\" = \"ATSI_Screeners\", \"NESB screeners\" = \"NESB_Screeners\"),\n                                         selected = \"Total_Screeners\"))),\n                 conditionalPanel(\n                   condition = \"input.response1 == 'SAS'\",\n                   column(6, selectInput(\"SAS_code1\", \"\", choices = SASlist,\n                                         selected = \"HNE\"))),\n                 conditionalPanel(\n                   condition = \"input.response1 == 'Age'\",\n                   column(6, selectInput(\"AgeGroup1\", \"\", choices = AgeList,\n                                         selected = \"5069\")))\n                 \n                 \n                 \n                 \n               ),\n               \n               mainPanel(\n                 span(textOutput(outputId = \"plotDescription\"),  style = \"font-family: 'verdana'; font-size: 8pt;font-weight: bold; color:#58595B\"),  br(), br(),\n                 tabsetPanel(type = \"tabs\",\n                             # tab showing bookings forecast \n                             tabPanel(\n                               title = \"Bookings\", id = \"bookingTab\",\n                               \n                               \n                               plotlyOutput(outputId = \"plotBooking\")\n                             ),\n                             # tab showing screens forecast\n                             tabPanel(\n                               title = \"Screens\", id = \"screenTab\",\n                               \n                               \n                               plotlyOutput(outputId = \"plotScreen1\")\n                             )\n                 )\n               )\n             )\n    ), \n    tabPanel( h4(\"Time-Series\"), fluid = TRUE, \n              h3(\"Breast Screen Forecasting Dashboard\"),\n              sidebarLayout(\n                sidebarPanel(\n                  helpText(h4(\"Please choose the analysis break down level:\")),\n                  radioButtons(\"response2\", \"\", choices = list ( \"State\" = \"State\",  \"SAS\" = \"SAS\", \"Age group\" = \"Age\"), selected = \"State\"),\n                  \n                  conditionalPanel(\n                    condition = \"input.response2 == 'SAS'\", \n                    column(6, selectInput(\"SAS_code2\", \"\", choices = SASlist,\n                                          selected = \"HNE\"))),\n                  \n                  conditionalPanel(\n                    condition = \"input.response2 == 'Age'\", \n                    column(6, selectInput(\"AgeGroup2\", \"\", choices = AgeList,\n                                          selected = \"5069\"))),\n                  \n                  br(), br(), br(),\n                  helpText(h4(\"Create time series plot for:\")),\n                  radioButtons(\"TS2\",\"\", choices = list ( \"Invitations\", \"Slots\" = \"Total_Slots\", \"Appointment\" = \"Total_Bookings\",\"Screens\" = \"Total_Screeners\"),\n                               selected = \"Total_Screeners\")\n                  \n                  \n                  \n                  \n                  \n                ),\n                \n                mainPanel(\n                  \n                  plotlyOutput(outputId = \"plotTS\")\n                  \n                ))\n    )\n    \n  ))\n\n################################################\n#### server\n\nserver <-  function(input, output) {\n  \n  output$plotDescription <- renderText({\n    if (input$response1 == \"State\") {paste(\"You have selected\", input$response1, input$State1)}\n    else if (input$response1 == \"SAS\"){paste( \"You have selected\", input$SAS_code1, input$response1 )}\n    else {paste( \"You have selected\", input$response1, input$AgeGroup1 )}\n    \n  })\n  \n  \n  output$plotBooking <- renderPlotly({\n    \n    ### reading data\n    response <- input$response1\n    \n    if (response == \"State\"){\n      \n      currentyeardata_DF <- StateDF[StateDF$Year == CurrentYear,]\n    }\n    else if (response == \"SAS\"){\n      \n      SAS_DF <- as.data.frame (SASDashboard1MonDataDF[input$SAS_code1])\n      colname <- c(\"Month\", \"Year\", \"Total_Screeners\", \"Target\", \"Initial_Screeners\", \"Re_Screeners\", \n                   \"Total_Bookings\", \"Total_Slots\" , \"Total_Dues\", \"NSW_Population\", \"ATSI_Population\", \"NESB_Population\",\n                   \"Initial_First\",\"Initial_Second\",\"Initial_DNR1\", \"Initial_DNR2\", \"Initial_DNRDNR\", \"NSW_Business_Days\", \n                   \"NSW_Business_Days_UnAdj\", \"Campaign\", \"CampaignNot2018\",\"Biannual\", \"Easter\", \"UnusualUp\", \"UnusualDown\")\n      colnames(SAS_DF) <- colname\n      currentyeardata_DF <- SAS_DF[SAS_DF$Year == CurrentYear,]\n    }\n    else if (response == \"Age\"){\n      \n      Age_DF <- as.data.frame (AgeDashboard1MonDataDF[input$AgeGroup1])\n      colname <- c(\"Month\", \"Year\",\"Total_Screeners\", \"Initial_Screeners\", \"Re_Screeners\", \n                   \"Total_Bookings\", \"Total_Slots\" , \"Total_Dues\", \"NSW_Population\", \"ATSI_Population\", \"NESB_Population\",\n                   \"Initial_First\",\"Initial_Second\",\"Initial_DNR1\", \"Initial_DNR2\", \"Initial_DNRDNR\", \"NSW_Business_Days\", \n                   \"NSW_Business_Days_UnAdj\", \"Campaign\", \"CampaignNot2018\",\"Biannual\", \"Easter\", \"UnusualUp\", \"UnusualDown\")\n      colnames(Age_DF) <- colname\n      currentyeardata_DF <- Age_DF[Age_DF$Year == CurrentYear,]\n    }\n    \n    \n    ### reading model\n    if (input$response1 == \"State\" & input$State1 ==\"Total_Screeners\"){\n      model <- readRDS(file = \"Total_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"Total_Bookings\"]\n      \n    }\n    else if (input$response1 == \"State\" & input$State1 ==\"Initial_Screeners\"){\n      model <- readRDS(file = \"Initial_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"Initial_Bookings\"]\n    }\n    else if (input$response1 == \"State\" & input$State1 ==\"Re_Screeners\"){\n      model <- readRDS(file = \"Rescreen_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"Rescreen_Bookings\"]\n      \n    }\n    else if (input$response1 == \"State\" & input$State1 ==\"NESB_Screeners\"){\n      model <- readRDS(file = \"NESB_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"NESB_Bookings\"]\n      \n    }\n    else if (input$response1 == \"State\" & input$State1 ==\"Arabic_Screeners\"){\n      model <- readRDS(file = \"Arabic_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"Arabic_Bookings\"]\n      \n    }\n    else if (input$response1 == \"State\" & input$State1 ==\"ATSI_Screeners\"){\n      model <- readRDS(file = \"ATSI_Bookings\")\n      ActualScreens <- currentyeardata_DF[,\"ATSI_Bookings\"]\n      \n    }\n    else if(input$response1 == \"SAS\"){\n      model <- readRDS(file = paste0(input$SAS_code1, \"Total_Screeners\"))\n      ActualScreens <- currentyeardata_DF[,\"Total_Screeners\"]\n      \n    }\n    \n    else if(input$response1 == \"Age\"){\n      model <- readRDS(file = paste0(input$AgeGroup1, \"Total_Screeners\"))\n      ActualScreens <- currentyeardata_DF[,\"Total_Screeners\"]\n      \n    }\n    \n    ###Time vector for forecast model #\n    time_frc <- as.yearmon(time(window(StateTS, start = c(CurrentYear, 1), end = c(CurrentYear, 12))[,\"Total_Screeners\"]))\n    time <- as.factor(time_frc)\n    \n    # forecast\n    forecast <- forecast(model, newdata = currentyeardata_DF)\n    fcast <- round(as.numeric(forecast$mean))\n    \n    \n    if (input$response1 %in% c(\"State\", \"SAS\")){\n      PlotData <- data.frame( time, screenings = ActualScreens , target = round(currentyeardata_DF[,\"Target\"]), fcast)\n    }\n    else {PlotData <- data.frame( time, screenings = ActualScreens , fcast)\n    }\n    PlotData$time <- factor(PlotData$time, levels = PlotData$time)\n    \n    \n    PlotData_past <- PlotData[1:(CurrentMon-1), ]\n    PlotData_future <- PlotData[CurrentMon:12, ]\n    \n    cols <- c(\"Actual\" = \"#7A378B\",  \"Target\" = \"red\", \"Model\" = \"#00BFFF\")\n    \n    p <- ggplot() +\n      geom_bar(data = PlotData,aes(x = time, y = screenings),fill = \"transparent\", stat=\"identity\",  width = 0.1)+\n      geom_bar(data = PlotData_past,aes(x = time, y = screenings, fill = \"Actual\"), stat=\"identity\",  width = 0.5) +\n      geom_point(data= PlotData_future, aes(x = time, y = fcast, colour = \"Model\"), shape = 8, size = 2) +\n      geom_line(data = PlotData_future, aes(x = time, y = fcast, colour = \"Model\", group = 1), lty = \"dashed\") +\n      geom_segment(data = PlotData, aes(y = 0, yend = max(PlotData$screenings), x = CurrentMon - 0.5, xend = CurrentMon - 0.5), colour = \"grey\", lty = \"dotted\", size = 1) +\n      ggtitle (paste(CurrentYear, \"appointments forecast plot\")) +\n      xlab(\"Year\") +\n      ylab(\"Number of appointments\") +\n      theme_bw() +\n      theme(text = element_text(family = \"Verdana\"),\n            panel.background = element_blank(),\n            panel.grid.major = element_blank(),\n            panel.grid.minor = element_blank(),\n            panel.border = element_blank(),\n            panel.grid = element_blank(),\n            axis.title.y = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 10, r = 10, b = 100, l = 10)),\n            axis.title.x = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 7, r = 10, b = 0, l = 10)),\n            axis.line = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks.length =unit(1.25, \"mm\"),\n            axis.text  = element_text(colour = \"#58595B\", size = 7),\n            legend.title = element_blank(),\n            legend.box = \"horizontal\",\n            legend.text = element_text(colour = \"#58595B\", size = 7, lineheight = 1),\n            legend.direction = \"horizontal\",\n            legend.justification = \"bottom\",\n            plot.title = element_text(size = 10,  face = \"bold\", colour = \"#58595B\")\n            \n      ) +\n      scale_y_continuous(label = comma, expand = c(0,0)) +\n      scale_colour_manual(name = \"\" , values = cols) +\n      scale_fill_manual(name = \"\", values = cols)\n    \n    \n    ggplotly()\n    \n  })\n  \n  output$plotScreen1 <- renderPlotly({\n    \n    ### reading data\n    response <- input$response1\n    \n    if (response == \"State\"){\n      \n      currentyeardata_DF <- StateDF[StateDF$Year == CurrentYear,]\n    }\n    else if (response == \"SAS\"){\n      \n      SAS_DF <- as.data.frame (SASDashboard1MonDataDF[input$SAS_code1])\n      colname <- c(\"Month\", \"Year\",\"Total_Screeners\", \"Target\", \"Initial_Screeners\", \"Re_Screeners\", \n                   \"Total_Bookings\", \"Total_Slots\" , \"Total_Dues\", \"NSW_Population\", \"ATSI_Population\", \"NESB_Population\",\n                   \"Initial_First\",\"Initial_Second\",\"Initial_DNR1\", \"Initial_DNR2\", \"Initial_DNRDNR\", \"NSW_Business_Days\", \n                   \"NSW_Business_Days_UnAdj\", \"Campaign\", \"CampaignNot2018\",\"Biannual\", \"Easter\", \"UnusualUp\", \"UnusualDown\")\n      colnames(SAS_DF) <- colname\n      currentyeardata_DF <- SAS_DF[SAS_DF$Year == CurrentYear,]\n    }\n    else if (response == \"Age\"){\n      \n      Age_DF <- as.data.frame (AgeDashboard1MonDataDF[input$AgeGroup1])\n      colname <- c(\"Month\", \"Year\",\"Total_Screeners\", \"Initial_Screeners\", \"Re_Screeners\", \n                   \"Total_Bookings\", \"Total_Slots\" , \"Total_Dues\", \"NSW_Population\", \"ATSI_Population\", \"NESB_Population\",\n                   \"Initial_First\",\"Initial_Second\",\"Initial_DNR1\", \"Initial_DNR2\", \"Initial_DNRDNR\", \"NSW_Business_Days\", \n                   \"NSW_Business_Days_UnAdj\", \"Campaign\", \"CampaignNot2018\",\"Biannual\", \"Easter\", \"UnusualUp\", \"UnusualDown\")\n      colnames(Age_DF) <- colname\n      currentyeardata_DF <- Age_DF[Age_DF$Year == CurrentYear,]\n    }\n    \n    \n    ### reading model\n    if (input$response1 == \"State\" & input$State1 %in% c(\"Total_Screeners\", \"Initial_Screeners\", \"Re_Screeners\", \"Arabic_Screeners\", \"ATSI_Screeners\", \"NESB_Screeners\")){\n      model <- readRDS(file = input$State1)\n      ActualScreens <- currentyeardata_DF[,input$State1]\n      \n    }\n    else if(input$response1 == \"SAS\"){\n      model <- readRDS(file = paste0(input$SAS_code1, \"Total_Screeners\"))\n      ActualScreens <- currentyeardata_DF[,\"Total_Screeners\"]\n      \n    }\n    \n    else if(input$response1 == \"Age\"){\n      model <- readRDS(file = paste0(input$AgeGroup1, \"Total_Screeners\"))\n      ActualScreens <- currentyeardata_DF[,\"Total_Screeners\"]\n      \n    }\n    \n    ###Time vector for forecast model #\n    time_frc <- as.yearmon(time(window(StateTS, start = c(CurrentYear, 1), end = c(CurrentYear, 12))[,\"Total_Screeners\"]))\n    time <- as.factor(time_frc)\n    \n    # forecast\n    forecast <- forecast(model, newdata = currentyeardata_DF)\n    fcast <- round(as.numeric(forecast$mean))\n    \n    \n    if (input$response1 %in% c(\"State\", \"SAS\")){\n      PlotData <- data.frame( time, screenings = ActualScreens , target = round(currentyeardata_DF[,\"Target\"]), fcast)\n    }\n    else {PlotData <- data.frame( time, screenings = ActualScreens , fcast)\n    }\n    PlotData$time <- factor(PlotData$time, levels = PlotData$time)\n    \n    \n    PlotData_past <- PlotData[1:(CurrentMon-1), ]\n    PlotData_future <- PlotData[CurrentMon:12, ]\n    \n    cols <- c(\"Actual\" = \"#7A378B\",  \"Target\" = \"red\", \"Model\" = \"#00BFFF\")\n    \n    p <- ggplot() +\n      geom_bar(data = PlotData,aes(x = time, y = screenings),fill = \"transparent\", stat=\"identity\",  width = 0.1)+\n      geom_bar(data = PlotData_past,aes(x = time, y = screenings, fill = \"Actual\"), stat=\"identity\",  width = 0.5) +\n      geom_point(data= PlotData_future, aes(x = time, y = fcast, colour = \"Model\"), shape = 8, size = 2) +\n      geom_line(data = PlotData_future, aes(x = time, y = fcast, colour = \"Model\", group = 1), lty = \"dashed\") +\n      geom_segment(data = PlotData, aes(y = 0, yend = max(PlotData$screenings), x = CurrentMon - 0.5, xend = CurrentMon - 0.5), colour = \"grey\", lty = \"dotted\", size = 1) +\n      ggtitle (paste(CurrentYear, \"screening forecast plot\")) +\n      xlab(\"Year\") +\n      ylab(\"Number of Screens\") +\n      theme_bw() +\n      theme(text = element_text(family = \"Verdana\"),\n            panel.background = element_blank(),\n            panel.grid.major = element_blank(),\n            panel.grid.minor = element_blank(),\n            panel.border = element_blank(),\n            panel.grid = element_blank(),\n            axis.title.y = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 10, r = 10, b = 100, l = 10)),\n            axis.title.x = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 7, r = 10, b = 0, l = 10)),\n            axis.line = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks.length =unit(1.25, \"mm\"),\n            axis.text  = element_text(colour = \"#58595B\", size = 7),\n            legend.title = element_blank(),\n            legend.box = \"horizontal\",\n            legend.text = element_text(colour = \"#58595B\", size = 7, lineheight = 1),\n            legend.direction = \"horizontal\",\n            legend.justification = \"bottom\",\n            plot.title = element_text(size = 10,  face = \"bold\", colour = \"#58595B\")\n            \n      ) +\n      scale_y_continuous(label = comma, expand = c(0,0)) +\n      scale_colour_manual(name = \"\" , values = cols) +\n      scale_fill_manual(name = \"\", values = cols)\n    \n    if ((input$response1 == \"State\" & input$State1 == \"Total_Screeners\") || input$response1 == \"SAS\" ) {\n      p <- p + geom_bar(data = PlotData_future, aes(x = time, y = target, colour = \"Target\"), width = 0.5, size = 0.5, stat = 'identity', fill = \"transparent\") +\n        geom_bar(data = PlotData_past, aes(x = time, y = target, colour = \"Target\"), width = 0.5, size = 0.5, stat = 'identity', fill = \"transparent\")}\n    \n    \n    ggplotly()\n    \n  })\n  \n  output$plotTS <- renderPlotly({ \n    \n    ### reading data   \n    \n    if (input$response2 %in% c(\"State\")){ \n      TS_Plot_data <- window(StateTS, end = c(CurrentYear,CurrentMon -1)) \n    }\n    else if (input$response2 == \"SAS\"){\n      index <- match(input$SAS_code2, SASlist) \n      TS_Plot_data <- window(SASDashboard2MonDataTS[[index]], end = c(CurrentYear,CurrentMon -1))}\n    else if (input$response2 == \"Age\"){\n      index <- match(input$AgeGroup2, AgeList) \n      TS_Plot_data <- window(AgeDashboard2MonDataTS[[index]], end = c(CurrentYear,CurrentMon -1))}\n    \n    \n    p <- ggseasonplot(TS_Plot_data[,input$TS2], year.labels=TRUE, year.labels.left=TRUE) +\n      xlab (\"Time\") + \n      ylab ( paste(\"Number of\",  input$TS2 )) +\n      ggtitle(paste(input$TS2, \"time series plot \"))+\n      theme_bw() +\n      theme(text = element_text(family = \"Verdana\"),\n            panel.grid.major = element_blank(),\n            panel.grid.minor = element_blank(),\n            panel.border = element_blank(),\n            panel.grid = element_blank(),\n            axis.title.y = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 0, r = 10, b = 15, l = 10)),\n            axis.title.x = element_text(size = 8, colour = \"#58595B\", margin = margin(t = 7, r = 10, b = 0, l = 10)),\n            axis.line = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks = element_line(colour = \"#58595B\", size = .176),\n            axis.ticks.length =unit(1.25, \"mm\"),\n            axis.text  = element_text(colour = \"#58595B\", size = 7),\n            legend.title = element_blank(),\n            legend.box = \"horizontal\",\n            legend.text = element_text(colour = \"#58595B\", size = 7, lineheight = 1),\n            legend.direction = \"horizontal\",\n            legend.justification = \"bottom\",\n            plot.title = element_text(size = 10,  face = \"bold\", colour = \"#58595B\")\n      )\n    \n    \n    ggplotly()\n    \n    \n  })\n\n  \n \n}\n\n\nshinyApp(ui, server)\n",
    "created" : 1538012218984.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4252773237",
    "id" : "4185AC47",
    "lastKnownWriteTime" : 1538013148,
    "last_content_update" : 1538013148416,
    "path" : "C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/sfd-dashboard/SDFDashboard.R",
    "project_path" : "SDFDashboard.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}