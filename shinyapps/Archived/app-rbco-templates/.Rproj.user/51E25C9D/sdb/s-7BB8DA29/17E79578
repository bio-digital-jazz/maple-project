{
    "collab_server" : "",
    "contents" : "###Cycle8####\n#1_BRS_1a#\n---\ntitle: \"1_BRS_1a\"\noutput: html_document\n---\n  \nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(extrafont)\nlibrary(stringr)\nlibrary(ggpubr)\nlibrary(Cairo)\n\n\n# global object....\n\n\nkFoo <- 5\nkBar <- 10\n\n\n# get data\n\n\n\n\n\n######SET CORRECT WD###########\nsetwd(\"G:/LHD/LHD_1-14_BRS Charts - Cycle 8\")\noptions(scipen = 999)  ###set no scientific notation in charts\ndata2 <- read.csv(\"Breast_NSW_Bipart_all_LGA.csv\") # reading the data file\nunique_lhds <- data2 %>%  ###creating a data frame with unique LHD/PHN names\n  distinct(LHD.Name)\n\nLHDs <- unique_lhds$LHD.Name[unique_lhds$LHD.Name!= \"NSW\"] ###creating a vector with unique LHD/PHN names\n\n\n\ncreatePDFTitle <- function() {\n  \n}\n\n\n\ncreateFootnotes() <- function() {\n  \n}\n\n\nfor (Highlight in LHDs) { #for loop open\n  \n  \n  i = 1 #set the number of the chart here as in the footnotes files\n  x <- read.csv(\"G:/Footnotes/Breast RBCO footnotes 2018.csv\") #reading the footnotes files\n  table1 <- read.csv(\"Breast_NSW_Bipart_all_LGA.csv\") # reading the data file\n  sno <- \"01\"   #for the file name\n  program <- \"BRS\" #CVS, BWS, BRS, HLP, SKP\n  type <- \"1a\" #Type of chart\n  createPDFTitle()\n  pdf_name <- paste0(Highlight,\"_\", sno,\"_\",program,\"_\", type,\"_\",\"Cycle8.pdf\") #for the file name\n  pdf_title <- paste0(x$Chart...Table.title[x$Chart..Table.ID ==i][1],\", \", x$LHD[x$Chart..Table.ID ==i][1],\", \", x$Year[x$Chart..Table.ID ==i][1]) #PDF title\n  pdf_title <- str_replace_all(string = pdf_title, pattern = \"-\", repl =\"\\u2013\") #adding the en dash to titles\n  pdf_title <- sapply(lapply(pdf_title, strwrap, width=75), paste, collapse=\"\\n\") #text wrapping the title\n  \n  #for footnotes\n  foot_dataset <- subset(x, x$Chart..Table.ID ==i) #subsetting the footnotes for chart 1\n  foot_dataset2 <- data.frame(foot_dataset$Symbol...Index,\"  \", foot_dataset$Footnotes, \"\\n\\n\") #converting the footnotes into a dataframe\n  foot_dataset$Footnotes\n  new2 <- lapply(foot_dataset$Footnotes, str_replace_all, pattern = \"-\", replacement =\"\\u2013\")\n  new <- sapply(lapply(new2, strwrap, width=118), paste, collapse=\"\\n\")\n  new <- data.frame(new)\n  new1 <- data.frame(foot_dataset2$foot_dataset.Symbol...Index, new)\n  new1$foot_dataset2.foot_dataset.Symbol...Index <- as.character(new1$foot_dataset2.foot_dataset.Symbol...Index)\n  for (i in 1:nrow(new1)){\n    if(grepl(\"[0-9]\",new1[i,1])){\n      new1[i,1] <- paste0(new1[i,1],\".\")    #add '.' to the footnote id\n    }\n  }\n  # grid extra\n  tt <- ttheme_minimal(core = list(fg_params = list(fontsize = 7, \n                                                    fontfamily = \"verdana\", \n                                                    just = c(\"top\", \"left\"), \n                                                    hjust = 0, x = 0.01, y = 1, \n                                                    vjust = 1, col = \"#58595B\", \n                                                    lineheight = 1)), padding = unit(c(0,1.5),\"mm\")) #defining the theme for the footnotes table\n  \n  g2 <- tableGrob(new1[1:nrow(new1), 1:ncol(new1)], rows = NULL, cols = NULL, theme = tt)\n  g2$widths <- unit(c(5,165), c(\"mm\", \"mm\"))\n  g2$layout$clip <- \"off\"\n  grid.newpage()\n  grid.draw(g2)\n  #####for footnotes#####\n  \n  #####the plot#####\n  \n  table1 <- subset(table1, as.character(LHD.Name) == as.character(LGA.Name)) \n  table1$Women.Population <- format(round(as.numeric(table1$Women.Population), digits = 0), big.mark = \",\")\n  table1$Rate <- as.numeric(table1$Rate)\n  table1$Rate <- round(table1$Rate, digits = 3)\n  table1$Women.Population[table1$LHD.Name==\"NSW\" & table1$Year == \"2016-2017\"]\n  table1$Women.Population[table1$LHD.Name==\"NSW\" & table1$Year == \"2015-2016\"]\n  \n  labels <- table1 %>%\n    filter(Year %in% c(\"2016-2017\")) \n  \n  x <- as.character(labels$Women.Population)\n  y <- as.character(labels$LHD.Name)\n  x <- str_replace_all(string=x, pattern=\" \", repl=\"\")\n  \n  labels$labels <- paste(y, '\\n', \"(N=\", x ,\")\", sep = \"\")\n  labels <- labels[,c(1,9)]\n  \n  table1 <- merge(table1, labels, by = \"LHD.Name\") \n\n  table1 <- arrange(table1, desc(table1$Rate))\n  \n  table1$Year <- factor(table1$Year)\n  \n  CurrYear <- \"2016-2017\"\n  PrevYear <- \"2015-2016\"\n  \n  CurrYearData <- table1 %>%\n    filter(Year %in% CurrYear)%>%\n    arrange(desc(Rate)) %>%\n    filter(LHD.Name != \"NSW\") %>%\n    mutate(Rate2 = row_number())\n  \n  PrevYearData <- table1 %>%\n    filter(Year %in% PrevYear)%>%\n    arrange(desc(Rate)) %>%\n    filter(LHD.Name != \"NSW\")\n  \n  #New code added to create new variable Rate2 for ordering the bars in geom_bar \n  PrevYearData <- merge(PrevYearData, CurrYearData[, c(\"LHD.Name\",\"Rate2\")], by = \"LHD.Name\")\n  \n  #being used later in the code to specify the vale for y intercept in geom_hline(aes(yintercept = yy,color=\"NSW\"), size = 1) \n  NSWLineCurrYear <- table1$Rate[table1$LHD.Name==\"NSW\" & table1$Year == CurrYear]\n  NSWLinePrevYear <- table1$Rate[table1$LHD.Name==\"NSW\" & table1$Year == PrevYear]\n  \n  BarCols <- c(CurrYear = \"#66CCF0\", PrevYear = \"#B3B3B3\" , Highlight = \"#005AAD\")\n  LineCcols <- c(\"NSWLineCurrYear\" = \"black\", \"NSWLinePrevYear\" = \"#999999\", \"ErrorBars\" = \"black\")\n  \n  CurrYearLabel <- str_replace_all(string=paste0(CurrYear, \"  \"), pattern=\"-\", repl=\"\\u2013\")\n  PrevYearLabel <- str_replace_all(string=paste0(PrevYear, \"  \"), pattern=\"-\", repl=\"\\u2013\")\n  NSWLabelCurrYear <- str_replace_all(string= paste0(\"NSW \", CurrYear,\"\\n\", \"(\", NSWLineCurrYear,\"%\", \", N=\",table1$Women.Population[table1$LHD.Name ==\"NSW\" & table1$Year ==CurrYear], \")\"), pattern=\"-\", repl=\"\\u2013\")\n  NSWLabelPrevYear <- str_replace_all(string= paste0(\"NSW \", PrevYear,\"\\n\", \"(\", NSWLinePrevYear,\"%\", \", N=\",table1$Women.Population[table1$LHD.Name ==\"NSW\" & table1$Year ==PrevYear], \")\"), pattern=\"-\", repl=\"\\u2013\")\n  \n  \n  \n  \n  g1 <- ggplot() +\n    #data was changed on this line from table2.1 to table2.1.1\n    geom_bar(data = PrevYearData, aes(x = reorder(LHD.Name, -Rate2), y = Rate, fill = \"PrevYear\"), stat = \"identity\") +\n    geom_bar(data = CurrYearData, width = 0.6, aes(x = factor(LHD.Name), y = Rate, fill = \"CurrYear\"), stat = \"identity\") +\n    geom_bar(data=subset(CurrYearData, LHD.Name == Highlight), aes(x = LHD.Name, y = Rate, fill = \"Highlight\"), width = 0.6, stat = \"identity\", alpha = 0.8) +\n    geom_text(data = CurrYearData, aes(x = factor(LHD.Name), label = format(Rate, digits = 3), y = 4), family = \"Verdana\", color = \"white\", size = (2.47), fontface = \"bold\") +\n    geom_errorbar(data = CurrYearData, aes(x = LHD.Name, ymin = Lower.CI, ymax=Upper.CI, colour = \"ErrorBars\"), width = 0, size = 0.469177215) +\n    geom_segment(aes(y = NSWLineCurrYear, yend = NSWLineCurrYear, x = CurrYearData$LHD.Name, xend = (nrow(CurrYearData) - 0.5 ), colour = \"NSWLineCurrYear\"), size = 1.0633)  +\n    geom_segment(aes(y = NSWLinePrevYear, yend = NSWLinePrevYear, x = CurrYearData$LHD.Name, xend = (nrow(CurrYearData) - 0.5 ), colour = \"NSWLinePrevYear\"), size = 1.0633)  +\n    xlab(\"Local Health District\") +\n    ylab(\"Participation rate (%)\") +\n    geom_point(data = CurrYearData, aes(x = LHD.Name, y = Lower.CI),shape=23,fill=\"black\") +\n    geom_point(data = CurrYearData, aes(x = LHD.Name, y = Upper.CI),shape=23,fill=\"black\") +\n    theme_bw() +\n    coord_flip()+\n    theme(text = element_text(family = \"Verdana\"),\n          panel.grid.major = element_blank(),\n          panel.grid.minor = element_blank(),\n          panel.border = element_blank(),\n          panel.grid = element_blank(),\n          strip.background  = element_blank(),\n          axis.title.x  = element_text(colour = \"#58595B\", size = 8),\n          axis.title.y = element_blank(),\n          axis.line = element_line(colour = \"#58595B\", size = .176),\n          axis.ticks = element_line(colour = \"#58595B\", size = .176),\n          axis.text  = element_text(size = 7, colour = \"#58595B\", lineheight = 1.1),\n          axis.ticks.length =unit(1.25, \"mm\"),\n          legend.position = c(0.5, -0.175),\n          legend.text = element_text(colour = \"#58595B\", size = 7, lineheight = 1),\n          legend.title=element_blank(),\n          legend.direction = \"horizontal\",\n          legend.justification = \"bottom\",\n          legend.spacing.y = unit(-1, \"mm\"),\n          legend.spacing.x = unit(1, \"mm\"),\n          legend.key.size = unit(6, \"mm\"),\n          legend.background = element_rect(fill = \"NA\", colour = \"NA\" )) +\n    scale_y_continuous(breaks = seq(0, 100, 10), limits =c(0, 100), expand = c(0,0)) +\n    scale_x_discrete(breaks = CurrYearData$LHD.Name, labels = CurrYearData$labels) +\n    guides(fill=guide_legend(order = 1, label.hjust = 0.2), colour = guide_legend(override.aes = list(size = 0.469177215))) +\n    scale_fill_manual(values = BarCols, breaks = c(\"CurrYear\", \"PrevYear\", \"Highlight\"), \n                      labels = c(CurrYearLabel, PrevYearLabel, Highlight)) +\n    scale_colour_manual(values = LineCcols, breaks= c(\"NSWLineCurrYear\", \"NSWLinePrevYear\", \"ErrorBars\"), \n                       labels = c(NSWLabelCurrYear, NSWLabelPrevYear, \"Confidence interval\" ))\n  g1\n  \n  #####the plot#####\n  \n  #####grobs for grid changes#####\n  p2 = ggplotGrob(g1)\n  # Get names of axis-l- grobs\n  names_list <- grid.ls(grid.force(p2))$name\n  names_list2 <- as.data.frame(names_list)\n  names_list2 <- names_list2 %>%\n    filter(str_detect(names_list,\"-bg.\"))\n  #####grobs for grid changes#####\n  \n  \n  \n  #### CREATE PDF\n  grid.newpage()\n  cairo_pdf(pdf_name, height = 11.6929, width = 8.26772,  family = \"Verdana\")\n  top.vp <- viewport(layout=grid.layout(7,3,\n                                        widths=unit(c(20, 170, 20), c(\"mm\", \"mm\", \"mm\")),\n                                        heights=unit(c(20, 10, 4, 170, 10, 59, 20), c(\"mm\", \"mm\", \"mm\", \"mm\", \"mm\",\"mm\", \"mm\"))))  \n  \n  top_margin <- viewport(layout.pos.row=1, layout.pos.col=2, name=\"top_margin\")                         \t#row 1, column 2 Top Margin\n  title <- viewport(layout.pos.row=2, layout.pos.col=2, name=\"title\")                                   \t#row 2, column 2 Plot title\n  padding <- viewport(layout.pos.row=3, layout.pos.col = 2,name=\"padding\")                                #row 3, column 2 padding bw title and plot\n  plot <- viewport(layout.pos.row=4, layout.pos.col = 2,name=\"plot\")                                    \t#row 4, column 2 Actual Plot/graph\n  legend <- viewport(layout.pos.row=5, layout.pos.col = 2,name=\"legend\")                                  #row 5, column 2 Actual Plot/graph\n  footnotes <- viewport(layout.pos.row=6, layout.pos.col=2, name=\"footnotes\")                             #row 6, column 2 Bottom section for Footnotes\n  bottom_margin <- viewport(layout.pos.row=7, layout.pos.col=2, name=\"bottom_margin\")                   \t#row 7, column 2 Bottom Margin\n  \n  #Define viewport tree by adding above viewport and then push these viewports to the grid using pushViewport command\n  splot <- vpTree(top.vp, vpList(top_margin,title, padding, plot, legend, footnotes,bottom_margin)) # Defining the hierarchy of the viewports\n  pushViewport(splot) # Creating viewports for plotting with the definitions of splot\n  \n  upViewport()\n  downViewport(\"top_margin\")\n  #grid.text(\"22top margin 20 mm\",gp = gpar(col=\"grey\"))\n  \n  upViewport()\n  downViewport(\"title\")\n  grid.text(pdf_title,x=unit(1,\"mm\"),y=unit(1,\"npc\") - unit(1,\"mm\"),just = c(\"left\",\"bottom\"), vjust = 1, gp = gpar(col=\"#8C0080\", fontsize=11, fontface = \"bold\", fontfamily = \"verdana\", lineheight = 1))  \n  \n  upViewport()\n  downViewport(\"padding\")\n\n  upViewport()\n  downViewport(\"plot\")\n  print(g1,newpage = FALSE, vjust = 1, just = c(\"left\",\"bottom\"))\n  downViewport(\"guides.4-2-4-2\")\n  downViewport(\"key-1-3-bg.2-4-2-4\")\n  grid.rect(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),\n            width = unit(1, \"npc\"), height = unit(1, \"npc\"),\n            just = \"centre\", hjust = NULL, vjust = NULL,\n            default.units = \"npc\", name = NULL,\n            gp=gpar(col=\"NA\",fill=\"white\"), draw = TRUE, vp = viewport(angle = 90))\n  \n  grid.rect(x = unit(0, \"npc\"), y = unit(0.5, \"npc\"),\n            width = unit(6, \"mm\"), height = unit(0.8, \"mm\"),\n            just = c(\"left\",\"top\"),gp=gpar(col=\"NA\", fill=\"black\"), vp = viewport(angle = 90))\n  \n  upViewport()\n  downViewport(\"key-1-7-bg.2-8-2-8\")\n  grid.rect(x = unit(0.5, \"npc\"), y = unit(0.5, \"npc\"),\n            width = unit(1, \"npc\"), height = unit(1, \"npc\"),\n            just = \"centre\", hjust = NULL, vjust = NULL,\n            default.units = \"npc\", name = NULL,\n            gp=gpar(col=\"NA\",fill=\"white\"), draw = TRUE, vp = viewport(angle = 90))\n  \n  grid.rect(x = unit(0, \"npc\"), y = unit(0.5, \"npc\"),\n            width = unit(6, \"mm\"), height = unit(0.8, \"mm\"),\n            just = c(\"left\",\"top\"),gp=gpar(col=\"NA\", fill=\"#B3B3B3\"), vp = viewport(angle = 90))\n  \n  upViewport(0)\n  downViewport(\"legend\")\n  \n  upViewport(0)\n  downViewport(\"footnotes\")\n  grid.rect(x=seq(0, 1, length = 131), y=0.86, width = unit(0.65, \"mm\"), height = unit(0.65, \"mm\"), default.units=\"npc\", name=NULL,gp=gpar(fill = \"#E2E3E4\", col = \"NA\"), draw=TRUE, vp=NULL)\n  grid.draw(g2)\n  \n  upViewport()\n  downViewport(\"bottom_margin\")\n  \n  dev.off()\n}\n\n",
    "created" : 1537834003929.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3996082668",
    "id" : "17E79578",
    "lastKnownWriteTime" : 1537344362,
    "last_content_update" : 1537836972185,
    "path" : "C:/JamiesFiles/Analytics/RShinyTestingServer/shinyapps/app-rbco-templates/1_BRS_1a_Cycle8_FL_LHD.R",
    "project_path" : "1_BRS_1a_Cycle8_FL_LHD.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}