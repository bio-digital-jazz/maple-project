{
    "collab_server" : "",
    "contents" : "library(ggplot2)\nlibrary(tidyverse)\nlibrary(plotly)\n\n\n\nuf.getDataset = function(dataPath) {\n  return(read_csv(dataPath))\n}\n\n\nuf.getRawMean = function(rawData) {\n  return(mean(rawData$Readmitted, na.rm = TRUE))\n}\n\n\nuf.prepareData = function(rawData, \n                          minAge, \n                          maxAge,\n                          minLengthOfStay,\n                          maxLengthOfStay,\n                          lhdChoice,\n                          genderFilter,\n                          cancerTypeFilter,\n                          procedureFilter) {\n  \n  rawRedmittedMean = mean(rawData$Readmitted)\n  \n  filteredData = filter(rawData, \n                        Age > minAge,\n                        Age < maxAge,\n                        LengthOfStayTotal > minLengthOfStay,\n                        LengthOfStayTotal < maxLengthOfStay)\n  \n  \n  print(filteredData)\n  \n  if (lhdChoice != \"All\" || is.null(lhdChoice)) {\n    filteredData = filter(filteredData,\n                          ResidentLHD %in% lhdChoice)\n  }\n  \n  if (genderFilter != \"All\" || is.null(genderFilter)) {\n    filteredData = filter(filteredData,\n                          Sex %in% genderFilter)\n  }\n  \n  if (cancerTypeFilter!= \"All\" || is.null(cancerTypeFilter)) {\n    filteredData = filter(filteredData,\n                          CancerName %in% cancerTypeFilter)\n  }\n  \n  \n  if (procedureFilter!= \"All\" || is.null(procedureFilter)) {\n    filteredData = filter(filteredData,\n                          ProcedureGroup %in% procedureFilter)\n  }\n  \n  \n  \n  \n  \n  groupedData = filteredData %>% \n    group_by(FacilityCode) %>%\n    summarize(\n      HospReadmission = mean(Readmitted, na.rm = TRUE), \n      HospVolume = length(Readmitted),\n      HospType = FacilityType[1]\n    )\n  \n  \n  \n  \n  \n  return(groupedData)\n}\n\n\n\n### block out the render function temp\nif(1==2) {\nuf.renderVisualization = function(data, meanOfFullDataset) {\n  p = ggplot() +\n    geom_point(data=data, aes(x=HospVolume, \n                              y=HospReadmission, \n                              size=HospVolume, \n                              colour=HospType), \n               alpha=0.75) + \n    xlim(0, 450) + ylim(0, 0.5) + \n    xlab(\"Total surgical volume\") + \n    ylab(\"Readmission rate\") +\n    geom_hline(yintercept = meanOfFullDataset, \n               colour = \"dodgerblue2\", \n               size=1)\n  \n  ggplotly(p)\n}\n}\n\n### updated render with funnels\nuf.renderVisualization = function(data, meanOfFullDataset) {\n  p = ggplot() +\n    geom_polygon(data=ufMakeFunnelPoly(0.105, 450, 0, 0.5), aes(x = X, y = Y2SD), fill = \"#BEBEBE70\", colour = NA) +\n    geom_polygon(data=ufMakeFunnelPoly(0.105, 450, 0, 0.5), aes(x = X, y = Y3SD), fill = \"#BEBEBE70\", colour = NA) +\n    geom_point(data=data, aes(x=HospVolume, \n                              y=HospReadmission, \n                              size=HospVolume, \n                              colour=HospType), \n               alpha=0.75) + \n    xlim(0, 450) + ylim(0, 0.5) + \n    xlab(\"Total surgical volume\") + \n    ylab(\"Readmission rate\") +\n    geom_hline(yintercept = meanOfFullDataset, \n               colour = \"dodgerblue2\", \n               size=1)\n  \n  ggplotly(p)\n}\n\n\n#\nufMakeFunnelPoly = function(Mean, XMax, YMin=0, YMax=1) {\n  \n  #\n  if(Mean > 1) Mean = 1\n  if(Mean < 0) Mean = 0\n  \n  #\n  XMax = XMax * 1.0\n  P = round(Mean, 2)\n  Q = 1 - P\n  N = 1:XMax\n  E = N * P\n  \n  Y2SDLow  = qbeta(0.023, E, N-E+1)\n  Y2SDHigh = qbeta(0.977, E+1, N-E)\n  \n  Y3SDLow  = qbeta(0.0013, E, N-E+1)\n  Y3SDHigh = qbeta(0.9987, E+1, N-E)\n  \n  ## need to clip the polygons here based on the 2x YLims\n  Y2SDLow[Y2SDLow < YMin] = YMin\n  Y2SDHigh[Y2SDHigh > YMax] = YMax\n  Y2SD = c(Y2SDHigh, rev(Y2SDLow))\n  \n  Y3SDLow[Y3SDLow < YMin] = YMin\n  Y3SDHigh[Y3SDHigh > YMax] = YMax\n  Y3SD = c(Y3SDHigh, rev(Y3SDLow))\n  \n  X = c(N, rev(N))\n  \n  data.frame(X=X, Y2SD = Y2SD, Y3SD = Y3SD)\n}\n\n\npath = \"./Data/SurgicalOutcomesLung.Fake.csv\"\n\ndata = uf.getDataset(path)\n\n\nmeanOfFullDataset = uf.getRawMean(data)\nhead(data)\n\n\n\n",
    "created" : 1534294490750.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3351904038",
    "id" : "2D667A8D",
    "lastKnownWriteTime" : 1531639138,
    "last_content_update" : 1531639138,
    "path" : "C:/JamiesFiles/Analytics/RShinyServer/shinyapps/app-surgery-readmissions/functions.R",
    "project_path" : "functions.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}