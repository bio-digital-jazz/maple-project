shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?lapply()
runApp()
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("./data/bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Projects and requests", windowTitle = "Mmmmm yeh"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price",
min = 0, max = 100,
value = c(25, 40), pre = "$"
),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "BEER"
),
uiOutput("countryOutput")
),
mainPanel(
htmlOutput('test'),
br(),
br(),
tableOutput("results")
)
)
)
server <- function(input, output, session) {
filteredForCountry <- reactive({
bcl %>%
filter(
Price >= input$priceInput[1],
Price <= input$priceInput[2],
Subtype == input$typeInput
)
})
output$countryOutput <- renderUI({
df <- filteredForCountry()
if (!is.null(df)) {
selectInput("countryInput", "Country",
sort(unique(df$Country)),
selected="CANADA")
}
})
filteredFull <- reactive({
if (is.null(input$countryInput)) {
return (filteredForCountry())
}
bcl %>%
filter(
Price >= input$priceInput[1],
Price <= input$priceInput[2],
Subtype == input$typeInput,
Country == input$countryInput
)
})
?lapply()
output$test <- renderUI({
for(i in 1:nrow(bcl)) {
row <- bcl[i,]
lapply(1:10, FUN = function(i) {
output[[paste0('b', i)]] <- renderUI({
tagList(
h4("Request number", i),
div('hello'),
div("there again"))
})
})
}
)
output$coolplot <- renderPlot({
if (is.null(filteredFull())) {return()}
ggplot(filteredFull(), aes(Alcohol_Content)) +
geom_histogram(binwidth = 0.05)
})
output$results <- renderTable({
filteredFull()
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(dplyr)
bcl <- read.csv("./data/bcl-data.csv", stringsAsFactors = FALSE)
ui <- fluidPage(
titlePanel("Projects and requests", windowTitle = "Mmmmm yeh"),
sidebarLayout(
sidebarPanel(
sliderInput("priceInput", "Price",
min = 0, max = 100,
value = c(25, 40), pre = "$"
),
radioButtons("typeInput", "Product type",
choices = c("BEER", "REFRESHMENT", "SPIRITS", "WINE"),
selected = "BEER"
),
uiOutput("countryOutput")
),
mainPanel(
htmlOutput('test'),
br(),
br(),
tableOutput("results")
)
)
)
server <- function(input, output, session) {
filteredForCountry <- reactive({
bcl %>%
filter(
Price >= input$priceInput[1],
Price <= input$priceInput[2],
Subtype == input$typeInput
)
})
output$countryOutput <- renderUI({
df <- filteredForCountry()
if (!is.null(df)) {
selectInput("countryInput", "Country",
sort(unique(df$Country)),
selected="CANADA")
}
})
filteredFull <- reactive({
if (is.null(input$countryInput)) {
return (filteredForCountry())
}
bcl %>%
filter(
Price >= input$priceInput[1],
Price <= input$priceInput[2],
Subtype == input$typeInput,
Country == input$countryInput
)
})
?lapply()
output$test <- renderUI({
for(i in 1:nrow(bcl)) {
row <- bcl[i,]
lapply(1:10, FUN = function(i) {
output[[paste0('b', i)]] <- renderUI({
tagList(
h4("Request number", i),
div('hello'),
div("there again"))
})
})
}
)
output$coolplot <- renderPlot({
if (is.null(filteredFull())) {return()}
ggplot(filteredFull(), aes(Alcohol_Content)) +
geom_histogram(binwidth = 0.05)
})
output$results <- renderTable({
filteredFull()
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "__uncomment__https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css")
),
titlePanel("tasks", windowTitle = "blah"),
fluidRow(
column(4,
div("blah blah")),
column(4,
selectInput("assetChoice",
"bb",
width='700px',
choices = c("Choose a data asset" = 1,),
selected = NULL)
),
column(4,
div('blah'))
),
fluidRow(
column(12,
htmlOutput('test'),
br(),
br(),
tableOutput("results"))
)
)
